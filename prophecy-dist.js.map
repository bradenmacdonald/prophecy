{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/immutable/dist/immutable.min.js",
    "source/account.js",
    "source/budget.js",
    "source/category.js",
    "source/currency.js",
    "source/pdate.js",
    "source/prophecy.js",
    "source/redux/actions.js",
    "source/redux/prophecy_redux.js",
    "source/transaction.js",
    "source/util.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.Immutable=e()}(this,function(){\"use strict\";function t(t,e){e&&(t.prototype=Object.create(e.prototype)),t.prototype.constructor=t}function e(t){return o(t)?t:O(t)}function r(t){return u(t)?t:x(t)}function n(t){return s(t)?t:k(t)}function i(t){return o(t)&&!a(t)?t:A(t)}function o(t){return!(!t||!t[ar])}function u(t){return!(!t||!t[hr])}function s(t){return!(!t||!t[fr])}function a(t){return u(t)||s(t)}function h(t){return!(!t||!t[cr])}function f(t){return t.value=!1,t}function c(t){t&&(t.value=!0)}function _(){}function p(t,e){e=e||0;for(var r=Math.max(0,t.length-e),n=Array(r),i=0;r>i;i++)n[i]=t[i+e];return n}function v(t){return void 0===t.size&&(t.size=t.__iterate(y)),t.size}function l(t,e){if(\"number\"!=typeof e){var r=e>>>0;if(\"\"+r!==e||4294967295===r)return NaN;e=r}return 0>e?v(t)+e:e}function y(){return!0}function d(t,e,r){return(0===t||void 0!==r&&-r>=t)&&(void 0===e||void 0!==r&&e>=r)}function m(t,e){return w(t,e,0)}function g(t,e){return w(t,e,e)}function w(t,e,r){return void 0===t?r:0>t?Math.max(0,e+t):void 0===e?t:Math.min(e,t)}function S(t){this.next=t}function z(t,e,r,n){var i=0===t?e:1===t?r:[e,r];return n?n.value=i:n={value:i,done:!1},n}function I(){return{value:void 0,done:!0}}function b(t){return!!M(t)}function q(t){return t&&\"function\"==typeof t.next}function D(t){var e=M(t);return e&&e.call(t)}function M(t){var e=t&&(zr&&t[zr]||t[Ir]);return\"function\"==typeof e?e:void 0}function E(t){return t&&\"number\"==typeof t.length}function O(t){return null===t||void 0===t?T():o(t)?t.toSeq():C(t)}function x(t){return null===t||void 0===t?T().toKeyedSeq():o(t)?u(t)?t.toSeq():t.fromEntrySeq():B(t)}function k(t){return null===t||void 0===t?T():o(t)?u(t)?t.entrySeq():t.toIndexedSeq():W(t)}function A(t){return(null===t||void 0===t?T():o(t)?u(t)?t.entrySeq():t:W(t)).toSetSeq()}function j(t){this._array=t,this.size=t.length}function R(t){var e=Object.keys(t);this._object=t,this._keys=e,\nthis.size=e.length}function U(t){this._iterable=t,this.size=t.length||t.size}function K(t){this._iterator=t,this._iteratorCache=[]}function L(t){return!(!t||!t[qr])}function T(){return Dr||(Dr=new j([]))}function B(t){var e=Array.isArray(t)?new j(t).fromEntrySeq():q(t)?new K(t).fromEntrySeq():b(t)?new U(t).fromEntrySeq():\"object\"==typeof t?new R(t):void 0;if(!e)throw new TypeError(\"Expected Array or iterable object of [k, v] entries, or keyed object: \"+t);return e}function W(t){var e=J(t);if(!e)throw new TypeError(\"Expected Array or iterable object of values: \"+t);return e}function C(t){var e=J(t)||\"object\"==typeof t&&new R(t);if(!e)throw new TypeError(\"Expected Array or iterable object of values, or keyed object: \"+t);return e}function J(t){return E(t)?new j(t):q(t)?new K(t):b(t)?new U(t):void 0}function N(t,e,r,n){var i=t._cache;if(i){for(var o=i.length-1,u=0;o>=u;u++){var s=i[r?o-u:u];if(e(s[1],n?s[0]:u,t)===!1)return u+1}return u}return t.__iterateUncached(e,r)}function P(t,e,r,n){var i=t._cache;if(i){var o=i.length-1,u=0;return new S(function(){var t=i[r?o-u:u];return u++>o?I():z(e,n?t[0]:u-1,t[1])})}return t.__iteratorUncached(e,r)}function H(t,e){return e?V(e,t,\"\",{\"\":t}):Y(t)}function V(t,e,r,n){return Array.isArray(e)?t.call(n,r,k(e).map(function(r,n){return V(t,r,n,e)})):Q(e)?t.call(n,r,x(e).map(function(r,n){return V(t,r,n,e)})):e}function Y(t){return Array.isArray(t)?k(t).map(Y).toList():Q(t)?x(t).map(Y).toMap():t}function Q(t){return t&&(t.constructor===Object||void 0===t.constructor)}function X(t,e){if(t===e||t!==t&&e!==e)return!0;if(!t||!e)return!1;if(\"function\"==typeof t.valueOf&&\"function\"==typeof e.valueOf){if(t=t.valueOf(),e=e.valueOf(),t===e||t!==t&&e!==e)return!0;if(!t||!e)return!1}return\"function\"==typeof t.equals&&\"function\"==typeof e.equals&&t.equals(e)?!0:!1}function F(t,e){if(t===e)return!0;if(!o(e)||void 0!==t.size&&void 0!==e.size&&t.size!==e.size||void 0!==t.__hash&&void 0!==e.__hash&&t.__hash!==e.__hash||u(t)!==u(e)||s(t)!==s(e)||h(t)!==h(e))return!1;if(0===t.size&&0===e.size)return!0;\nvar r=!a(t);if(h(t)){var n=t.entries();return e.every(function(t,e){var i=n.next().value;return i&&X(i[1],t)&&(r||X(i[0],e))})&&n.next().done}var i=!1;if(void 0===t.size)if(void 0===e.size)\"function\"==typeof t.cacheResult&&t.cacheResult();else{i=!0;var f=t;t=e,e=f}var c=!0,_=e.__iterate(function(e,n){return(r?t.has(e):i?X(e,t.get(n,yr)):X(t.get(n,yr),e))?void 0:(c=!1,!1)});return c&&t.size===_}function G(t,e){if(!(this instanceof G))return new G(t,e);if(this._value=t,this.size=void 0===e?1/0:Math.max(0,e),0===this.size){if(Mr)return Mr;Mr=this}}function Z(t,e){if(!t)throw Error(e)}function $(t,e,r){if(!(this instanceof $))return new $(t,e,r);if(Z(0!==r,\"Cannot step a Range by 0\"),t=t||0,void 0===e&&(e=1/0),r=void 0===r?1:Math.abs(r),t>e&&(r=-r),this._start=t,this._end=e,this._step=r,this.size=Math.max(0,Math.ceil((e-t)/r-1)+1),0===this.size){if(Er)return Er;Er=this}}function tt(){throw TypeError(\"Abstract\")}function et(){}function rt(){}function nt(){}function it(t){return t>>>1&1073741824|3221225471&t}function ot(t){if(t===!1||null===t||void 0===t)return 0;if(\"function\"==typeof t.valueOf&&(t=t.valueOf(),t===!1||null===t||void 0===t))return 0;if(t===!0)return 1;var e=typeof t;if(\"number\"===e){if(t!==t||t===1/0)return 0;var r=0|t;for(r!==t&&(r^=4294967295*t);t>4294967295;)t/=4294967295,r^=t;return it(r)}if(\"string\"===e)return t.length>Kr?ut(t):st(t);if(\"function\"==typeof t.hashCode)return t.hashCode();if(\"object\"===e)return at(t);if(\"function\"==typeof t.toString)return st(\"\"+t);throw Error(\"Value type \"+e+\" cannot be hashed.\")}function ut(t){var e=Br[t];return void 0===e&&(e=st(t),Tr===Lr&&(Tr=0,Br={}),Tr++,Br[t]=e),e}function st(t){for(var e=0,r=0;t.length>r;r++)e=31*e+t.charCodeAt(r)|0;return it(e)}function at(t){var e;if(jr&&(e=Or.get(t),void 0!==e))return e;if(e=t[Ur],void 0!==e)return e;if(!Ar){if(e=t.propertyIsEnumerable&&t.propertyIsEnumerable[Ur],void 0!==e)return e;if(e=ht(t),void 0!==e)return e}if(e=++Rr,1073741824&Rr&&(Rr=0),jr)Or.set(t,e);else{if(void 0!==kr&&kr(t)===!1)throw Error(\"Non-extensible objects are not allowed as keys.\");\nif(Ar)Object.defineProperty(t,Ur,{enumerable:!1,configurable:!1,writable:!1,value:e});else if(void 0!==t.propertyIsEnumerable&&t.propertyIsEnumerable===t.constructor.prototype.propertyIsEnumerable)t.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},t.propertyIsEnumerable[Ur]=e;else{if(void 0===t.nodeType)throw Error(\"Unable to set a non-enumerable property on object.\");t[Ur]=e}}return e}function ht(t){if(t&&t.nodeType>0)switch(t.nodeType){case 1:return t.uniqueID;case 9:return t.documentElement&&t.documentElement.uniqueID}}function ft(t){Z(t!==1/0,\"Cannot perform this action with an infinite size.\")}function ct(t){return null===t||void 0===t?zt():_t(t)&&!h(t)?t:zt().withMutations(function(e){var n=r(t);ft(n.size),n.forEach(function(t,r){return e.set(r,t)})})}function _t(t){return!(!t||!t[Wr])}function pt(t,e){this.ownerID=t,this.entries=e}function vt(t,e,r){this.ownerID=t,this.bitmap=e,this.nodes=r}function lt(t,e,r){this.ownerID=t,this.count=e,this.nodes=r}function yt(t,e,r){this.ownerID=t,this.keyHash=e,this.entries=r}function dt(t,e,r){this.ownerID=t,this.keyHash=e,this.entry=r}function mt(t,e,r){this._type=e,this._reverse=r,this._stack=t._root&&wt(t._root)}function gt(t,e){return z(t,e[0],e[1])}function wt(t,e){return{node:t,index:0,__prev:e}}function St(t,e,r,n){var i=Object.create(Cr);return i.size=t,i._root=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function zt(){return Jr||(Jr=St(0))}function It(t,e,r){var n,i;if(t._root){var o=f(dr),u=f(mr);if(n=bt(t._root,t.__ownerID,0,void 0,e,r,o,u),!u.value)return t;i=t.size+(o.value?r===yr?-1:1:0)}else{if(r===yr)return t;i=1,n=new pt(t.__ownerID,[[e,r]])}return t.__ownerID?(t.size=i,t._root=n,t.__hash=void 0,t.__altered=!0,t):n?St(i,n):zt()}function bt(t,e,r,n,i,o,u,s){return t?t.update(e,r,n,i,o,u,s):o===yr?t:(c(s),c(u),new dt(e,n,[i,o]))}function qt(t){return t.constructor===dt||t.constructor===yt}function Dt(t,e,r,n,i){if(t.keyHash===n)return new yt(e,n,[t.entry,i]);var o,u=(0===r?t.keyHash:t.keyHash>>>r)&lr,s=(0===r?n:n>>>r)&lr,a=u===s?[Dt(t,e,r+pr,n,i)]:(o=new dt(e,n,i),\ns>u?[t,o]:[o,t]);return new vt(e,1<<u|1<<s,a)}function Mt(t,e,r,n){t||(t=new _);for(var i=new dt(t,ot(r),[r,n]),o=0;e.length>o;o++){var u=e[o];i=i.update(t,0,void 0,u[0],u[1])}return i}function Et(t,e,r,n){for(var i=0,o=0,u=Array(r),s=0,a=1,h=e.length;h>s;s++,a<<=1){var f=e[s];void 0!==f&&s!==n&&(i|=a,u[o++]=f)}return new vt(t,i,u)}function Ot(t,e,r,n,i){for(var o=0,u=Array(vr),s=0;0!==r;s++,r>>>=1)u[s]=1&r?e[o++]:void 0;return u[n]=i,new lt(t,o+1,u)}function xt(t,e,n){for(var i=[],u=0;n.length>u;u++){var s=n[u],a=r(s);o(s)||(a=a.map(function(t){return H(t)})),i.push(a)}return jt(t,e,i)}function kt(t,e,r){return t&&t.mergeDeep&&o(e)?t.mergeDeep(e):X(t,e)?t:e}function At(t){return function(e,r,n){if(e&&e.mergeDeepWith&&o(r))return e.mergeDeepWith(t,r);var i=t(e,r,n);return X(e,i)?e:i}}function jt(t,e,r){return r=r.filter(function(t){return 0!==t.size}),0===r.length?t:0!==t.size||t.__ownerID||1!==r.length?t.withMutations(function(t){for(var n=e?function(r,n){t.update(n,yr,function(t){return t===yr?r:e(t,r,n)})}:function(e,r){t.set(r,e)},i=0;r.length>i;i++)r[i].forEach(n)}):t.constructor(r[0])}function Rt(t,e,r,n){var i=t===yr,o=e.next();if(o.done){var u=i?r:t,s=n(u);return s===u?t:s}Z(i||t&&t.set,\"invalid keyPath\");var a=o.value,h=i?yr:t.get(a,yr),f=Rt(h,e,r,n);return f===h?t:f===yr?t.remove(a):(i?zt():t).set(a,f)}function Ut(t){return t-=t>>1&1431655765,t=(858993459&t)+(t>>2&858993459),t=t+(t>>4)&252645135,t+=t>>8,t+=t>>16,127&t}function Kt(t,e,r,n){var i=n?t:p(t);return i[e]=r,i}function Lt(t,e,r,n){var i=t.length+1;if(n&&e+1===i)return t[e]=r,t;for(var o=Array(i),u=0,s=0;i>s;s++)s===e?(o[s]=r,u=-1):o[s]=t[s+u];return o}function Tt(t,e,r){var n=t.length-1;if(r&&e===n)return t.pop(),t;for(var i=Array(n),o=0,u=0;n>u;u++)u===e&&(o=1),i[u]=t[u+o];return i}function Bt(t){var e=Pt();if(null===t||void 0===t)return e;if(Wt(t))return t;var r=n(t),i=r.size;return 0===i?e:(ft(i),i>0&&vr>i?Nt(0,i,pr,null,new Ct(r.toArray())):e.withMutations(function(t){t.setSize(i),r.forEach(function(e,r){return t.set(r,e)})}))}function Wt(t){\nreturn!(!t||!t[Vr])}function Ct(t,e){this.array=t,this.ownerID=e}function Jt(t,e){function r(t,e,r){return 0===e?n(t,r):i(t,e,r)}function n(t,r){var n=r===s?a&&a.array:t&&t.array,i=r>o?0:o-r,h=u-r;return h>vr&&(h=vr),function(){if(i===h)return Xr;var t=e?--h:i++;return n&&n[t]}}function i(t,n,i){var s,a=t&&t.array,h=i>o?0:o-i>>n,f=(u-i>>n)+1;return f>vr&&(f=vr),function(){for(;;){if(s){var t=s();if(t!==Xr)return t;s=null}if(h===f)return Xr;var o=e?--f:h++;s=r(a&&a[o],n-pr,i+(o<<n))}}}var o=t._origin,u=t._capacity,s=Gt(u),a=t._tail;return r(t._root,t._level,0)}function Nt(t,e,r,n,i,o,u){var s=Object.create(Yr);return s.size=e-t,s._origin=t,s._capacity=e,s._level=r,s._root=n,s._tail=i,s.__ownerID=o,s.__hash=u,s.__altered=!1,s}function Pt(){return Qr||(Qr=Nt(0,0,pr))}function Ht(t,e,r){if(e=l(t,e),e!==e)return t;if(e>=t.size||0>e)return t.withMutations(function(t){0>e?Xt(t,e).set(0,r):Xt(t,0,e+1).set(e,r)});e+=t._origin;var n=t._tail,i=t._root,o=f(mr);return e>=Gt(t._capacity)?n=Vt(n,t.__ownerID,0,e,r,o):i=Vt(i,t.__ownerID,t._level,e,r,o),o.value?t.__ownerID?(t._root=i,t._tail=n,t.__hash=void 0,t.__altered=!0,t):Nt(t._origin,t._capacity,t._level,i,n):t}function Vt(t,e,r,n,i,o){var u=n>>>r&lr,s=t&&t.array.length>u;if(!s&&void 0===i)return t;var a;if(r>0){var h=t&&t.array[u],f=Vt(h,e,r-pr,n,i,o);return f===h?t:(a=Yt(t,e),a.array[u]=f,a)}return s&&t.array[u]===i?t:(c(o),a=Yt(t,e),void 0===i&&u===a.array.length-1?a.array.pop():a.array[u]=i,a)}function Yt(t,e){return e&&t&&e===t.ownerID?t:new Ct(t?t.array.slice():[],e)}function Qt(t,e){if(e>=Gt(t._capacity))return t._tail;if(1<<t._level+pr>e){for(var r=t._root,n=t._level;r&&n>0;)r=r.array[e>>>n&lr],n-=pr;return r}}function Xt(t,e,r){void 0!==e&&(e=0|e),void 0!==r&&(r=0|r);var n=t.__ownerID||new _,i=t._origin,o=t._capacity,u=i+e,s=void 0===r?o:0>r?o+r:i+r;if(u===i&&s===o)return t;if(u>=s)return t.clear();for(var a=t._level,h=t._root,f=0;0>u+f;)h=new Ct(h&&h.array.length?[void 0,h]:[],n),a+=pr,f+=1<<a;f&&(u+=f,i+=f,s+=f,o+=f);for(var c=Gt(o),p=Gt(s);p>=1<<a+pr;)h=new Ct(h&&h.array.length?[h]:[],n),\na+=pr;var v=t._tail,l=c>p?Qt(t,s-1):p>c?new Ct([],n):v;if(v&&p>c&&o>u&&v.array.length){h=Yt(h,n);for(var y=h,d=a;d>pr;d-=pr){var m=c>>>d&lr;y=y.array[m]=Yt(y.array[m],n)}y.array[c>>>pr&lr]=v}if(o>s&&(l=l&&l.removeAfter(n,0,s)),u>=p)u-=p,s-=p,a=pr,h=null,l=l&&l.removeBefore(n,0,u);else if(u>i||c>p){for(f=0;h;){var g=u>>>a&lr;if(g!==p>>>a&lr)break;g&&(f+=(1<<a)*g),a-=pr,h=h.array[g]}h&&u>i&&(h=h.removeBefore(n,a,u-f)),h&&c>p&&(h=h.removeAfter(n,a,p-f)),f&&(u-=f,s-=f)}return t.__ownerID?(t.size=s-u,t._origin=u,t._capacity=s,t._level=a,t._root=h,t._tail=l,t.__hash=void 0,t.__altered=!0,t):Nt(u,s,a,h,l)}function Ft(t,e,r){for(var i=[],u=0,s=0;r.length>s;s++){var a=r[s],h=n(a);h.size>u&&(u=h.size),o(a)||(h=h.map(function(t){return H(t)})),i.push(h)}return u>t.size&&(t=t.setSize(u)),jt(t,e,i)}function Gt(t){return vr>t?0:t-1>>>pr<<pr}function Zt(t){return null===t||void 0===t?ee():$t(t)?t:ee().withMutations(function(e){var n=r(t);ft(n.size),n.forEach(function(t,r){return e.set(r,t)})})}function $t(t){return _t(t)&&h(t)}function te(t,e,r,n){var i=Object.create(Zt.prototype);return i.size=t?t.size:0,i._map=t,i._list=e,i.__ownerID=r,i.__hash=n,i}function ee(){return Fr||(Fr=te(zt(),Pt()))}function re(t,e,r){var n,i,o=t._map,u=t._list,s=o.get(e),a=void 0!==s;if(r===yr){if(!a)return t;u.size>=vr&&u.size>=2*o.size?(i=u.filter(function(t,e){return void 0!==t&&s!==e}),n=i.toKeyedSeq().map(function(t){return t[0]}).flip().toMap(),t.__ownerID&&(n.__ownerID=i.__ownerID=t.__ownerID)):(n=o.remove(e),i=s===u.size-1?u.pop():u.set(s,void 0))}else if(a){if(r===u.get(s)[1])return t;n=o,i=u.set(s,[e,r])}else n=o.set(e,u.size),i=u.set(u.size,[e,r]);return t.__ownerID?(t.size=n.size,t._map=n,t._list=i,t.__hash=void 0,t):te(n,i)}function ne(t,e){this._iter=t,this._useKeys=e,this.size=t.size}function ie(t){this._iter=t,this.size=t.size}function oe(t){this._iter=t,this.size=t.size}function ue(t){this._iter=t,this.size=t.size}function se(t){var e=Ee(t);return e._iter=t,e.size=t.size,e.flip=function(){return t},e.reverse=function(){var e=t.reverse.apply(this);\nreturn e.flip=function(){return t.reverse()},e},e.has=function(e){return t.includes(e)},e.includes=function(e){return t.has(e)},e.cacheResult=Oe,e.__iterateUncached=function(e,r){var n=this;return t.__iterate(function(t,r){return e(r,t,n)!==!1},r)},e.__iteratorUncached=function(e,r){if(e===Sr){var n=t.__iterator(e,r);return new S(function(){var t=n.next();if(!t.done){var e=t.value[0];t.value[0]=t.value[1],t.value[1]=e}return t})}return t.__iterator(e===wr?gr:wr,r)},e}function ae(t,e,r){var n=Ee(t);return n.size=t.size,n.has=function(e){return t.has(e)},n.get=function(n,i){var o=t.get(n,yr);return o===yr?i:e.call(r,o,n,t)},n.__iterateUncached=function(n,i){var o=this;return t.__iterate(function(t,i,u){return n(e.call(r,t,i,u),i,o)!==!1},i)},n.__iteratorUncached=function(n,i){var o=t.__iterator(Sr,i);return new S(function(){var i=o.next();if(i.done)return i;var u=i.value,s=u[0];return z(n,s,e.call(r,u[1],s,t),i)})},n}function he(t,e){var r=Ee(t);return r._iter=t,r.size=t.size,r.reverse=function(){return t},t.flip&&(r.flip=function(){var e=se(t);return e.reverse=function(){return t.flip()},e}),r.get=function(r,n){return t.get(e?r:-1-r,n)},r.has=function(r){return t.has(e?r:-1-r)},r.includes=function(e){return t.includes(e)},r.cacheResult=Oe,r.__iterate=function(e,r){var n=this;return t.__iterate(function(t,r){return e(t,r,n)},!r)},r.__iterator=function(e,r){return t.__iterator(e,!r)},r}function fe(t,e,r,n){var i=Ee(t);return n&&(i.has=function(n){var i=t.get(n,yr);return i!==yr&&!!e.call(r,i,n,t)},i.get=function(n,i){var o=t.get(n,yr);return o!==yr&&e.call(r,o,n,t)?o:i}),i.__iterateUncached=function(i,o){var u=this,s=0;return t.__iterate(function(t,o,a){return e.call(r,t,o,a)?(s++,i(t,n?o:s-1,u)):void 0},o),s},i.__iteratorUncached=function(i,o){var u=t.__iterator(Sr,o),s=0;return new S(function(){for(;;){var o=u.next();if(o.done)return o;var a=o.value,h=a[0],f=a[1];if(e.call(r,f,h,t))return z(i,n?h:s++,f,o)}})},i}function ce(t,e,r){var n=ct().asMutable();return t.__iterate(function(i,o){n.update(e.call(r,i,o,t),0,function(t){\nreturn t+1})}),n.asImmutable()}function _e(t,e,r){var n=u(t),i=(h(t)?Zt():ct()).asMutable();t.__iterate(function(o,u){i.update(e.call(r,o,u,t),function(t){return t=t||[],t.push(n?[u,o]:o),t})});var o=Me(t);return i.map(function(e){return be(t,o(e))})}function pe(t,e,r,n){var i=t.size;if(void 0!==e&&(e=0|e),void 0!==r&&(r=r===1/0?i:0|r),d(e,r,i))return t;var o=m(e,i),u=g(r,i);if(o!==o||u!==u)return pe(t.toSeq().cacheResult(),e,r,n);var s,a=u-o;a===a&&(s=0>a?0:a);var h=Ee(t);return h.size=0===s?s:t.size&&s||void 0,!n&&L(t)&&s>=0&&(h.get=function(e,r){return e=l(this,e),e>=0&&s>e?t.get(e+o,r):r}),h.__iterateUncached=function(e,r){var i=this;if(0===s)return 0;if(r)return this.cacheResult().__iterate(e,r);var u=0,a=!0,h=0;return t.__iterate(function(t,r){return a&&(a=u++<o)?void 0:(h++,e(t,n?r:h-1,i)!==!1&&h!==s)}),h},h.__iteratorUncached=function(e,r){if(0!==s&&r)return this.cacheResult().__iterator(e,r);var i=0!==s&&t.__iterator(e,r),u=0,a=0;return new S(function(){for(;u++<o;)i.next();if(++a>s)return I();var t=i.next();return n||e===wr?t:e===gr?z(e,a-1,void 0,t):z(e,a-1,t.value[1],t)})},h}function ve(t,e,r){var n=Ee(t);return n.__iterateUncached=function(n,i){var o=this;if(i)return this.cacheResult().__iterate(n,i);var u=0;return t.__iterate(function(t,i,s){return e.call(r,t,i,s)&&++u&&n(t,i,o)}),u},n.__iteratorUncached=function(n,i){var o=this;if(i)return this.cacheResult().__iterator(n,i);var u=t.__iterator(Sr,i),s=!0;return new S(function(){if(!s)return I();var t=u.next();if(t.done)return t;var i=t.value,a=i[0],h=i[1];return e.call(r,h,a,o)?n===Sr?t:z(n,a,h,t):(s=!1,I())})},n}function le(t,e,r,n){var i=Ee(t);return i.__iterateUncached=function(i,o){var u=this;if(o)return this.cacheResult().__iterate(i,o);var s=!0,a=0;return t.__iterate(function(t,o,h){return s&&(s=e.call(r,t,o,h))?void 0:(a++,i(t,n?o:a-1,u))}),a},i.__iteratorUncached=function(i,o){var u=this;if(o)return this.cacheResult().__iterator(i,o);var s=t.__iterator(Sr,o),a=!0,h=0;return new S(function(){var t,o,f;do{if(t=s.next(),t.done)return n||i===wr?t:i===gr?z(i,h++,void 0,t):z(i,h++,t.value[1],t);\nvar c=t.value;o=c[0],f=c[1],a&&(a=e.call(r,f,o,u))}while(a);return i===Sr?t:z(i,o,f,t)})},i}function ye(t,e){var n=u(t),i=[t].concat(e).map(function(t){return o(t)?n&&(t=r(t)):t=n?B(t):W(Array.isArray(t)?t:[t]),t}).filter(function(t){return 0!==t.size});if(0===i.length)return t;if(1===i.length){var a=i[0];if(a===t||n&&u(a)||s(t)&&s(a))return a}var h=new j(i);return n?h=h.toKeyedSeq():s(t)||(h=h.toSetSeq()),h=h.flatten(!0),h.size=i.reduce(function(t,e){if(void 0!==t){var r=e.size;if(void 0!==r)return t+r}},0),h}function de(t,e,r){var n=Ee(t);return n.__iterateUncached=function(n,i){function u(t,h){var f=this;t.__iterate(function(t,i){return(!e||e>h)&&o(t)?u(t,h+1):n(t,r?i:s++,f)===!1&&(a=!0),!a},i)}var s=0,a=!1;return u(t,0),s},n.__iteratorUncached=function(n,i){var u=t.__iterator(n,i),s=[],a=0;return new S(function(){for(;u;){var t=u.next();if(t.done===!1){var h=t.value;if(n===Sr&&(h=h[1]),e&&!(e>s.length)||!o(h))return r?t:z(n,a++,h,t);s.push(u),u=h.__iterator(n,i)}else u=s.pop()}return I()})},n}function me(t,e,r){var n=Me(t);return t.toSeq().map(function(i,o){return n(e.call(r,i,o,t))}).flatten(!0)}function ge(t,e){var r=Ee(t);return r.size=t.size&&2*t.size-1,r.__iterateUncached=function(r,n){var i=this,o=0;return t.__iterate(function(t,n){return(!o||r(e,o++,i)!==!1)&&r(t,o++,i)!==!1},n),o},r.__iteratorUncached=function(r,n){var i,o=t.__iterator(wr,n),u=0;return new S(function(){return(!i||u%2)&&(i=o.next(),i.done)?i:u%2?z(r,u++,e):z(r,u++,i.value,i)})},r}function we(t,e,r){e||(e=xe);var n=u(t),i=0,o=t.toSeq().map(function(e,n){return[n,e,i++,r?r(e,n,t):e]}).toArray();return o.sort(function(t,r){return e(t[3],r[3])||t[2]-r[2]}).forEach(n?function(t,e){o[e].length=2}:function(t,e){o[e]=t[1]}),n?x(o):s(t)?k(o):A(o)}function Se(t,e,r){if(e||(e=xe),r){var n=t.toSeq().map(function(e,n){return[e,r(e,n,t)]}).reduce(function(t,r){return ze(e,t[1],r[1])?r:t});return n&&n[0]}return t.reduce(function(t,r){return ze(e,t,r)?r:t})}function ze(t,e,r){var n=t(r,e);return 0===n&&r!==e&&(void 0===r||null===r||r!==r)||n>0}function Ie(t,r,n){\nvar i=Ee(t);return i.size=new j(n).map(function(t){return t.size}).min(),i.__iterate=function(t,e){for(var r,n=this.__iterator(wr,e),i=0;!(r=n.next()).done&&t(r.value,i++,this)!==!1;);return i},i.__iteratorUncached=function(t,i){var o=n.map(function(t){return t=e(t),D(i?t.reverse():t)}),u=0,s=!1;return new S(function(){var e;return s||(e=o.map(function(t){return t.next()}),s=e.some(function(t){return t.done})),s?I():z(t,u++,r.apply(null,e.map(function(t){return t.value})))})},i}function be(t,e){return L(t)?e:t.constructor(e)}function qe(t){if(t!==Object(t))throw new TypeError(\"Expected [K, V] tuple: \"+t)}function De(t){return ft(t.size),v(t)}function Me(t){return u(t)?r:s(t)?n:i}function Ee(t){return Object.create((u(t)?x:s(t)?k:A).prototype)}function Oe(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):O.prototype.cacheResult.call(this)}function xe(t,e){return t>e?1:e>t?-1:0}function ke(t){var r=D(t);if(!r){if(!E(t))throw new TypeError(\"Expected iterable or array-like: \"+t);r=D(e(t))}return r}function Ae(t,e){var r,n=function(o){if(o instanceof n)return o;if(!(this instanceof n))return new n(o);if(!r){r=!0;var u=Object.keys(t);Ue(i,u),i.size=u.length,i._name=e,i._keys=u,i._defaultValues=t}this._map=ct(o)},i=n.prototype=Object.create(Gr);return i.constructor=n,n}function je(t,e,r){var n=Object.create(Object.getPrototypeOf(t));return n._map=e,n.__ownerID=r,n}function Re(t){return t._name||t.constructor.name||\"Record\"}function Ue(t,e){try{e.forEach(Ke.bind(void 0,t))}catch(r){}}function Ke(t,e){Object.defineProperty(t,e,{get:function(){return this.get(e)},set:function(t){Z(this.__ownerID,\"Cannot set on an immutable record.\"),this.set(e,t)}})}function Le(t){return null===t||void 0===t?Ce():Te(t)&&!h(t)?t:Ce().withMutations(function(e){var r=i(t);ft(r.size),r.forEach(function(t){return e.add(t)})})}function Te(t){return!(!t||!t[Zr])}function Be(t,e){return t.__ownerID?(t.size=e.size,t._map=e,t):e===t._map?t:0===e.size?t.__empty():t.__make(e)}function We(t,e){var r=Object.create($r);\nreturn r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function Ce(){return tn||(tn=We(zt()))}function Je(t){return null===t||void 0===t?He():Ne(t)?t:He().withMutations(function(e){var r=i(t);ft(r.size),r.forEach(function(t){return e.add(t)})})}function Ne(t){return Te(t)&&h(t)}function Pe(t,e){var r=Object.create(en);return r.size=t?t.size:0,r._map=t,r.__ownerID=e,r}function He(){return rn||(rn=Pe(ee()))}function Ve(t){return null===t||void 0===t?Xe():Ye(t)?t:Xe().unshiftAll(t)}function Ye(t){return!(!t||!t[nn])}function Qe(t,e,r,n){var i=Object.create(on);return i.size=t,i._head=e,i.__ownerID=r,i.__hash=n,i.__altered=!1,i}function Xe(){return un||(un=Qe(0))}function Fe(t,e){var r=function(r){t.prototype[r]=e[r]};return Object.keys(e).forEach(r),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(r),t}function Ge(t,e){return e}function Ze(t,e){return[e,t]}function $e(t){return function(){return!t.apply(this,arguments)}}function tr(t){return function(){return-t.apply(this,arguments)}}function er(t){return\"string\"==typeof t?JSON.stringify(t):t+\"\"}function rr(){return p(arguments)}function nr(t,e){return e>t?1:t>e?-1:0}function ir(t){if(t.size===1/0)return 0;var e=h(t),r=u(t),n=e?1:0,i=t.__iterate(r?e?function(t,e){n=31*n+ur(ot(t),ot(e))|0}:function(t,e){n=n+ur(ot(t),ot(e))|0}:e?function(t){n=31*n+ot(t)|0}:function(t){n=n+ot(t)|0});return or(i,n)}function or(t,e){return e=xr(e,3432918353),e=xr(e<<15|e>>>-15,461845907),e=xr(e<<13|e>>>-13,5),e=(e+3864292196|0)^t,e=xr(e^e>>>16,2246822507),e=xr(e^e>>>13,3266489909),e=it(e^e>>>16)}function ur(t,e){return t^e+2654435769+(t<<6)+(t>>2)|0}var sr=Array.prototype.slice;t(r,e),t(n,e),t(i,e),e.isIterable=o,e.isKeyed=u,e.isIndexed=s,e.isAssociative=a,e.isOrdered=h,e.Keyed=r,e.Indexed=n,e.Set=i;var ar=\"@@__IMMUTABLE_ITERABLE__@@\",hr=\"@@__IMMUTABLE_KEYED__@@\",fr=\"@@__IMMUTABLE_INDEXED__@@\",cr=\"@@__IMMUTABLE_ORDERED__@@\",_r=\"delete\",pr=5,vr=1<<pr,lr=vr-1,yr={},dr={value:!1},mr={value:!1},gr=0,wr=1,Sr=2,zr=\"function\"==typeof Symbol&&Symbol.iterator,Ir=\"@@iterator\",br=zr||Ir;\nS.prototype.toString=function(){return\"[Iterator]\"},S.KEYS=gr,S.VALUES=wr,S.ENTRIES=Sr,S.prototype.inspect=S.prototype.toSource=function(){return\"\"+this},S.prototype[br]=function(){return this},t(O,e),O.of=function(){return O(arguments)},O.prototype.toSeq=function(){return this},O.prototype.toString=function(){return this.__toString(\"Seq {\",\"}\")},O.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},O.prototype.__iterate=function(t,e){return N(this,t,e,!0)},O.prototype.__iterator=function(t,e){return P(this,t,e,!0)},t(x,O),x.prototype.toKeyedSeq=function(){return this},t(k,O),k.of=function(){return k(arguments)},k.prototype.toIndexedSeq=function(){return this},k.prototype.toString=function(){return this.__toString(\"Seq [\",\"]\")},k.prototype.__iterate=function(t,e){return N(this,t,e,!1)},k.prototype.__iterator=function(t,e){return P(this,t,e,!1)},t(A,O),A.of=function(){return A(arguments)},A.prototype.toSetSeq=function(){return this},O.isSeq=L,O.Keyed=x,O.Set=A,O.Indexed=k;var qr=\"@@__IMMUTABLE_SEQ__@@\";O.prototype[qr]=!0,t(j,k),j.prototype.get=function(t,e){return this.has(t)?this._array[l(this,t)]:e},j.prototype.__iterate=function(t,e){for(var r=this._array,n=r.length-1,i=0;n>=i;i++)if(t(r[e?n-i:i],i,this)===!1)return i+1;return i},j.prototype.__iterator=function(t,e){var r=this._array,n=r.length-1,i=0;return new S(function(){return i>n?I():z(t,i,r[e?n-i++:i++])})},t(R,x),R.prototype.get=function(t,e){return void 0===e||this.has(t)?this._object[t]:e},R.prototype.has=function(t){return this._object.hasOwnProperty(t)},R.prototype.__iterate=function(t,e){for(var r=this._object,n=this._keys,i=n.length-1,o=0;i>=o;o++){var u=n[e?i-o:o];if(t(r[u],u,this)===!1)return o+1}return o},R.prototype.__iterator=function(t,e){var r=this._object,n=this._keys,i=n.length-1,o=0;return new S(function(){var u=n[e?i-o:o];return o++>i?I():z(t,u,r[u])})},R.prototype[cr]=!0,t(U,k),U.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);\nvar r=this._iterable,n=D(r),i=0;if(q(n))for(var o;!(o=n.next()).done&&t(o.value,i++,this)!==!1;);return i},U.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var r=this._iterable,n=D(r);if(!q(n))return new S(I);var i=0;return new S(function(){var e=n.next();return e.done?e:z(t,i++,e.value)})},t(K,k),K.prototype.__iterateUncached=function(t,e){if(e)return this.cacheResult().__iterate(t,e);for(var r=this._iterator,n=this._iteratorCache,i=0;n.length>i;)if(t(n[i],i++,this)===!1)return i;for(var o;!(o=r.next()).done;){var u=o.value;if(n[i]=u,t(u,i++,this)===!1)break}return i},K.prototype.__iteratorUncached=function(t,e){if(e)return this.cacheResult().__iterator(t,e);var r=this._iterator,n=this._iteratorCache,i=0;return new S(function(){if(i>=n.length){var e=r.next();if(e.done)return e;n[i]=e.value}return z(t,i,n[i++])})};var Dr;t(G,k),G.prototype.toString=function(){return 0===this.size?\"Repeat []\":\"Repeat [ \"+this._value+\" \"+this.size+\" times ]\"},G.prototype.get=function(t,e){return this.has(t)?this._value:e},G.prototype.includes=function(t){return X(this._value,t)},G.prototype.slice=function(t,e){var r=this.size;return d(t,e,r)?this:new G(this._value,g(e,r)-m(t,r))},G.prototype.reverse=function(){return this},G.prototype.indexOf=function(t){return X(this._value,t)?0:-1},G.prototype.lastIndexOf=function(t){return X(this._value,t)?this.size:-1},G.prototype.__iterate=function(t,e){for(var r=0;this.size>r;r++)if(t(this._value,r,this)===!1)return r+1;return r},G.prototype.__iterator=function(t,e){var r=this,n=0;return new S(function(){return r.size>n?z(t,n++,r._value):I()})},G.prototype.equals=function(t){return t instanceof G?X(this._value,t._value):F(t)};var Mr;t($,k),$.prototype.toString=function(){return 0===this.size?\"Range []\":\"Range [ \"+this._start+\"...\"+this._end+(1!==this._step?\" by \"+this._step:\"\")+\" ]\"},$.prototype.get=function(t,e){return this.has(t)?this._start+l(this,t)*this._step:e},$.prototype.includes=function(t){var e=(t-this._start)/this._step;return e>=0&&this.size>e&&e===Math.floor(e);\n},$.prototype.slice=function(t,e){return d(t,e,this.size)?this:(t=m(t,this.size),e=g(e,this.size),t>=e?new $(0,0):new $(this.get(t,this._end),this.get(e,this._end),this._step))},$.prototype.indexOf=function(t){var e=t-this._start;if(e%this._step===0){var r=e/this._step;if(r>=0&&this.size>r)return r}return-1},$.prototype.lastIndexOf=function(t){return this.indexOf(t)},$.prototype.__iterate=function(t,e){for(var r=this.size-1,n=this._step,i=e?this._start+r*n:this._start,o=0;r>=o;o++){if(t(i,o,this)===!1)return o+1;i+=e?-n:n}return o},$.prototype.__iterator=function(t,e){var r=this.size-1,n=this._step,i=e?this._start+r*n:this._start,o=0;return new S(function(){var u=i;return i+=e?-n:n,o>r?I():z(t,o++,u)})},$.prototype.equals=function(t){return t instanceof $?this._start===t._start&&this._end===t._end&&this._step===t._step:F(this,t)};var Er;t(tt,e),t(et,tt),t(rt,tt),t(nt,tt),tt.Keyed=et,tt.Indexed=rt,tt.Set=nt;var Or,xr=\"function\"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(t,e){t=0|t,e=0|e;var r=65535&t,n=65535&e;return r*n+((t>>>16)*n+r*(e>>>16)<<16>>>0)|0},kr=Object.isExtensible,Ar=function(){try{return Object.defineProperty({},\"@\",{}),!0}catch(t){return!1}}(),jr=\"function\"==typeof WeakMap;jr&&(Or=new WeakMap);var Rr=0,Ur=\"__immutablehash__\";\"function\"==typeof Symbol&&(Ur=Symbol(Ur));var Kr=16,Lr=255,Tr=0,Br={};t(ct,et),ct.of=function(){var t=sr.call(arguments,0);return zt().withMutations(function(e){for(var r=0;t.length>r;r+=2){if(r+1>=t.length)throw Error(\"Missing value for key: \"+t[r]);e.set(t[r],t[r+1])}})},ct.prototype.toString=function(){return this.__toString(\"Map {\",\"}\")},ct.prototype.get=function(t,e){return this._root?this._root.get(0,void 0,t,e):e},ct.prototype.set=function(t,e){return It(this,t,e)},ct.prototype.setIn=function(t,e){return this.updateIn(t,yr,function(){return e})},ct.prototype.remove=function(t){return It(this,t,yr)},ct.prototype.deleteIn=function(t){return this.updateIn(t,function(){return yr})},ct.prototype.update=function(t,e,r){return 1===arguments.length?t(this):this.updateIn([t],e,r);\n},ct.prototype.updateIn=function(t,e,r){r||(r=e,e=void 0);var n=Rt(this,ke(t),e,r);return n===yr?void 0:n},ct.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):zt()},ct.prototype.merge=function(){return xt(this,void 0,arguments)},ct.prototype.mergeWith=function(t){var e=sr.call(arguments,1);return xt(this,t,e)},ct.prototype.mergeIn=function(t){var e=sr.call(arguments,1);return this.updateIn(t,zt(),function(t){return\"function\"==typeof t.merge?t.merge.apply(t,e):e[e.length-1]})},ct.prototype.mergeDeep=function(){return xt(this,kt,arguments)},ct.prototype.mergeDeepWith=function(t){var e=sr.call(arguments,1);return xt(this,At(t),e)},ct.prototype.mergeDeepIn=function(t){var e=sr.call(arguments,1);return this.updateIn(t,zt(),function(t){return\"function\"==typeof t.mergeDeep?t.mergeDeep.apply(t,e):e[e.length-1]})},ct.prototype.sort=function(t){return Zt(we(this,t))},ct.prototype.sortBy=function(t,e){return Zt(we(this,e,t))},ct.prototype.withMutations=function(t){var e=this.asMutable();return t(e),e.wasAltered()?e.__ensureOwner(this.__ownerID):this},ct.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new _)},ct.prototype.asImmutable=function(){return this.__ensureOwner()},ct.prototype.wasAltered=function(){return this.__altered},ct.prototype.__iterator=function(t,e){return new mt(this,t,e)},ct.prototype.__iterate=function(t,e){var r=this,n=0;return this._root&&this._root.iterate(function(e){return n++,t(e[1],e[0],r)},e),n},ct.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?St(this.size,this._root,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},ct.isMap=_t;var Wr=\"@@__IMMUTABLE_MAP__@@\",Cr=ct.prototype;Cr[Wr]=!0,Cr[_r]=Cr.remove,Cr.removeIn=Cr.deleteIn,pt.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,u=i.length;u>o;o++)if(X(r,i[o][0]))return i[o][1];return n},pt.prototype.update=function(t,e,r,n,i,o,u){for(var s=i===yr,a=this.entries,h=0,f=a.length;f>h&&!X(n,a[h][0]);h++);\nvar _=f>h;if(_?a[h][1]===i:s)return this;if(c(u),(s||!_)&&c(o),!s||1!==a.length){if(!_&&!s&&a.length>=Nr)return Mt(t,a,n,i);var v=t&&t===this.ownerID,l=v?a:p(a);return _?s?h===f-1?l.pop():l[h]=l.pop():l[h]=[n,i]:l.push([n,i]),v?(this.entries=l,this):new pt(t,l)}},vt.prototype.get=function(t,e,r,n){void 0===e&&(e=ot(r));var i=1<<((0===t?e:e>>>t)&lr),o=this.bitmap;return 0===(o&i)?n:this.nodes[Ut(o&i-1)].get(t+pr,e,r,n)},vt.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=ot(n));var s=(0===e?r:r>>>e)&lr,a=1<<s,h=this.bitmap,f=0!==(h&a);if(!f&&i===yr)return this;var c=Ut(h&a-1),_=this.nodes,p=f?_[c]:void 0,v=bt(p,t,e+pr,r,n,i,o,u);if(v===p)return this;if(!f&&v&&_.length>=Pr)return Ot(t,_,h,s,v);if(f&&!v&&2===_.length&&qt(_[1^c]))return _[1^c];if(f&&v&&1===_.length&&qt(v))return v;var l=t&&t===this.ownerID,y=f?v?h:h^a:h|a,d=f?v?Kt(_,c,v,l):Tt(_,c,l):Lt(_,c,v,l);return l?(this.bitmap=y,this.nodes=d,this):new vt(t,y,d)},lt.prototype.get=function(t,e,r,n){void 0===e&&(e=ot(r));var i=(0===t?e:e>>>t)&lr,o=this.nodes[i];return o?o.get(t+pr,e,r,n):n},lt.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=ot(n));var s=(0===e?r:r>>>e)&lr,a=i===yr,h=this.nodes,f=h[s];if(a&&!f)return this;var c=bt(f,t,e+pr,r,n,i,o,u);if(c===f)return this;var _=this.count;if(f){if(!c&&(_--,Hr>_))return Et(t,h,_,s)}else _++;var p=t&&t===this.ownerID,v=Kt(h,s,c,p);return p?(this.count=_,this.nodes=v,this):new lt(t,_,v)},yt.prototype.get=function(t,e,r,n){for(var i=this.entries,o=0,u=i.length;u>o;o++)if(X(r,i[o][0]))return i[o][1];return n},yt.prototype.update=function(t,e,r,n,i,o,u){void 0===r&&(r=ot(n));var s=i===yr;if(r!==this.keyHash)return s?this:(c(u),c(o),Dt(this,t,e,r,[n,i]));for(var a=this.entries,h=0,f=a.length;f>h&&!X(n,a[h][0]);h++);var _=f>h;if(_?a[h][1]===i:s)return this;if(c(u),(s||!_)&&c(o),s&&2===f)return new dt(t,this.keyHash,a[1^h]);var v=t&&t===this.ownerID,l=v?a:p(a);return _?s?h===f-1?l.pop():l[h]=l.pop():l[h]=[n,i]:l.push([n,i]),v?(this.entries=l,this):new yt(t,this.keyHash,l)},dt.prototype.get=function(t,e,r,n){return X(r,this.entry[0])?this.entry[1]:n;\n},dt.prototype.update=function(t,e,r,n,i,o,u){var s=i===yr,a=X(n,this.entry[0]);return(a?i===this.entry[1]:s)?this:(c(u),s?void c(o):a?t&&t===this.ownerID?(this.entry[1]=i,this):new dt(t,this.keyHash,[n,i]):(c(o),Dt(this,t,e,ot(n),[n,i])))},pt.prototype.iterate=yt.prototype.iterate=function(t,e){for(var r=this.entries,n=0,i=r.length-1;i>=n;n++)if(t(r[e?i-n:n])===!1)return!1},vt.prototype.iterate=lt.prototype.iterate=function(t,e){for(var r=this.nodes,n=0,i=r.length-1;i>=n;n++){var o=r[e?i-n:n];if(o&&o.iterate(t,e)===!1)return!1}},dt.prototype.iterate=function(t,e){return t(this.entry)},t(mt,S),mt.prototype.next=function(){for(var t=this._type,e=this._stack;e;){var r,n=e.node,i=e.index++;if(n.entry){if(0===i)return gt(t,n.entry)}else if(n.entries){if(r=n.entries.length-1,r>=i)return gt(t,n.entries[this._reverse?r-i:i])}else if(r=n.nodes.length-1,r>=i){var o=n.nodes[this._reverse?r-i:i];if(o){if(o.entry)return gt(t,o.entry);e=this._stack=wt(o,e)}continue}e=this._stack=this._stack.__prev}return I()};var Jr,Nr=vr/4,Pr=vr/2,Hr=vr/4;t(Bt,rt),Bt.of=function(){return this(arguments)},Bt.prototype.toString=function(){return this.__toString(\"List [\",\"]\")},Bt.prototype.get=function(t,e){if(t=l(this,t),t>=0&&this.size>t){t+=this._origin;var r=Qt(this,t);return r&&r.array[t&lr]}return e},Bt.prototype.set=function(t,e){return Ht(this,t,e)},Bt.prototype.remove=function(t){return this.has(t)?0===t?this.shift():t===this.size-1?this.pop():this.splice(t,1):this},Bt.prototype.insert=function(t,e){return this.splice(t,0,e)},Bt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=pr,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):Pt()},Bt.prototype.push=function(){var t=arguments,e=this.size;return this.withMutations(function(r){Xt(r,0,e+t.length);for(var n=0;t.length>n;n++)r.set(e+n,t[n])})},Bt.prototype.pop=function(){return Xt(this,0,-1)},Bt.prototype.unshift=function(){var t=arguments;return this.withMutations(function(e){Xt(e,-t.length);for(var r=0;t.length>r;r++)e.set(r,t[r]);\n})},Bt.prototype.shift=function(){return Xt(this,1)},Bt.prototype.merge=function(){return Ft(this,void 0,arguments)},Bt.prototype.mergeWith=function(t){var e=sr.call(arguments,1);return Ft(this,t,e)},Bt.prototype.mergeDeep=function(){return Ft(this,kt,arguments)},Bt.prototype.mergeDeepWith=function(t){var e=sr.call(arguments,1);return Ft(this,At(t),e)},Bt.prototype.setSize=function(t){return Xt(this,0,t)},Bt.prototype.slice=function(t,e){var r=this.size;return d(t,e,r)?this:Xt(this,m(t,r),g(e,r))},Bt.prototype.__iterator=function(t,e){var r=0,n=Jt(this,e);return new S(function(){var e=n();return e===Xr?I():z(t,r++,e)})},Bt.prototype.__iterate=function(t,e){for(var r,n=0,i=Jt(this,e);(r=i())!==Xr&&t(r,n++,this)!==!1;);return n},Bt.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Nt(this._origin,this._capacity,this._level,this._root,this._tail,t,this.__hash):(this.__ownerID=t,this)},Bt.isList=Wt;var Vr=\"@@__IMMUTABLE_LIST__@@\",Yr=Bt.prototype;Yr[Vr]=!0,Yr[_r]=Yr.remove,Yr.setIn=Cr.setIn,Yr.deleteIn=Yr.removeIn=Cr.removeIn,Yr.update=Cr.update,Yr.updateIn=Cr.updateIn,Yr.mergeIn=Cr.mergeIn,Yr.mergeDeepIn=Cr.mergeDeepIn,Yr.withMutations=Cr.withMutations,Yr.asMutable=Cr.asMutable,Yr.asImmutable=Cr.asImmutable,Yr.wasAltered=Cr.wasAltered,Ct.prototype.removeBefore=function(t,e,r){if(r===e?1<<e:0===this.array.length)return this;var n=r>>>e&lr;if(n>=this.array.length)return new Ct([],t);var i,o=0===n;if(e>0){var u=this.array[n];if(i=u&&u.removeBefore(t,e-pr,r),i===u&&o)return this}if(o&&!i)return this;var s=Yt(this,t);if(!o)for(var a=0;n>a;a++)s.array[a]=void 0;return i&&(s.array[n]=i),s},Ct.prototype.removeAfter=function(t,e,r){if(r===(e?1<<e:0)||0===this.array.length)return this;var n=r-1>>>e&lr;if(n>=this.array.length)return this;var i;if(e>0){var o=this.array[n];if(i=o&&o.removeAfter(t,e-pr,r),i===o&&n===this.array.length-1)return this}var u=Yt(this,t);return u.array.splice(n+1),i&&(u.array[n]=i),u};var Qr,Xr={};t(Zt,ct),Zt.of=function(){return this(arguments)},Zt.prototype.toString=function(){return this.__toString(\"OrderedMap {\",\"}\");\n},Zt.prototype.get=function(t,e){var r=this._map.get(t);return void 0!==r?this._list.get(r)[1]:e},Zt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):ee()},Zt.prototype.set=function(t,e){return re(this,t,e)},Zt.prototype.remove=function(t){return re(this,t,yr)},Zt.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Zt.prototype.__iterate=function(t,e){var r=this;return this._list.__iterate(function(e){return e&&t(e[1],e[0],r)},e)},Zt.prototype.__iterator=function(t,e){return this._list.fromEntrySeq().__iterator(t,e)},Zt.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t),r=this._list.__ensureOwner(t);return t?te(e,r,t,this.__hash):(this.__ownerID=t,this._map=e,this._list=r,this)},Zt.isOrderedMap=$t,Zt.prototype[cr]=!0,Zt.prototype[_r]=Zt.prototype.remove;var Fr;t(ne,x),ne.prototype.get=function(t,e){return this._iter.get(t,e)},ne.prototype.has=function(t){return this._iter.has(t)},ne.prototype.valueSeq=function(){return this._iter.valueSeq()},ne.prototype.reverse=function(){var t=this,e=he(this,!0);return this._useKeys||(e.valueSeq=function(){return t._iter.toSeq().reverse()}),e},ne.prototype.map=function(t,e){var r=this,n=ae(this,t,e);return this._useKeys||(n.valueSeq=function(){return r._iter.toSeq().map(t,e)}),n},ne.prototype.__iterate=function(t,e){var r,n=this;return this._iter.__iterate(this._useKeys?function(e,r){return t(e,r,n)}:(r=e?De(this):0,function(i){return t(i,e?--r:r++,n)}),e)},ne.prototype.__iterator=function(t,e){if(this._useKeys)return this._iter.__iterator(t,e);var r=this._iter.__iterator(wr,e),n=e?De(this):0;return new S(function(){var i=r.next();return i.done?i:z(t,e?--n:n++,i.value,i)})},ne.prototype[cr]=!0,t(ie,k),ie.prototype.includes=function(t){return this._iter.includes(t)},ie.prototype.__iterate=function(t,e){var r=this,n=0;return this._iter.__iterate(function(e){return t(e,n++,r)},e)},ie.prototype.__iterator=function(t,e){var r=this._iter.__iterator(wr,e),n=0;\nreturn new S(function(){var e=r.next();return e.done?e:z(t,n++,e.value,e)})},t(oe,A),oe.prototype.has=function(t){return this._iter.includes(t)},oe.prototype.__iterate=function(t,e){var r=this;return this._iter.__iterate(function(e){return t(e,e,r)},e)},oe.prototype.__iterator=function(t,e){var r=this._iter.__iterator(wr,e);return new S(function(){var e=r.next();return e.done?e:z(t,e.value,e.value,e)})},t(ue,x),ue.prototype.entrySeq=function(){return this._iter.toSeq()},ue.prototype.__iterate=function(t,e){var r=this;return this._iter.__iterate(function(e){if(e){qe(e);var n=o(e);return t(n?e.get(1):e[1],n?e.get(0):e[0],r)}},e)},ue.prototype.__iterator=function(t,e){var r=this._iter.__iterator(wr,e);return new S(function(){for(;;){var e=r.next();if(e.done)return e;var n=e.value;if(n){qe(n);var i=o(n);return z(t,i?n.get(0):n[0],i?n.get(1):n[1],e)}}})},ie.prototype.cacheResult=ne.prototype.cacheResult=oe.prototype.cacheResult=ue.prototype.cacheResult=Oe,t(Ae,et),Ae.prototype.toString=function(){return this.__toString(Re(this)+\" {\",\"}\")},Ae.prototype.has=function(t){return this._defaultValues.hasOwnProperty(t)},Ae.prototype.get=function(t,e){if(!this.has(t))return e;var r=this._defaultValues[t];return this._map?this._map.get(t,r):r},Ae.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var t=this.constructor;return t._empty||(t._empty=je(this,zt()))},Ae.prototype.set=function(t,e){if(!this.has(t))throw Error('Cannot set unknown key \"'+t+'\" on '+Re(this));if(this._map&&!this._map.has(t)){var r=this._defaultValues[t];if(e===r)return this}var n=this._map&&this._map.set(t,e);return this.__ownerID||n===this._map?this:je(this,n)},Ae.prototype.remove=function(t){if(!this.has(t))return this;var e=this._map&&this._map.remove(t);return this.__ownerID||e===this._map?this:je(this,e)},Ae.prototype.wasAltered=function(){return this._map.wasAltered()},Ae.prototype.__iterator=function(t,e){var n=this;return r(this._defaultValues).map(function(t,e){return n.get(e)}).__iterator(t,e)},Ae.prototype.__iterate=function(t,e){\nvar n=this;return r(this._defaultValues).map(function(t,e){return n.get(e)}).__iterate(t,e)},Ae.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map&&this._map.__ensureOwner(t);return t?je(this,e,t):(this.__ownerID=t,this._map=e,this)};var Gr=Ae.prototype;Gr[_r]=Gr.remove,Gr.deleteIn=Gr.removeIn=Cr.removeIn,Gr.merge=Cr.merge,Gr.mergeWith=Cr.mergeWith,Gr.mergeIn=Cr.mergeIn,Gr.mergeDeep=Cr.mergeDeep,Gr.mergeDeepWith=Cr.mergeDeepWith,Gr.mergeDeepIn=Cr.mergeDeepIn,Gr.setIn=Cr.setIn,Gr.update=Cr.update,Gr.updateIn=Cr.updateIn,Gr.withMutations=Cr.withMutations,Gr.asMutable=Cr.asMutable,Gr.asImmutable=Cr.asImmutable,t(Le,nt),Le.of=function(){return this(arguments)},Le.fromKeys=function(t){return this(r(t).keySeq())},Le.prototype.toString=function(){return this.__toString(\"Set {\",\"}\")},Le.prototype.has=function(t){return this._map.has(t)},Le.prototype.add=function(t){return Be(this,this._map.set(t,!0))},Le.prototype.remove=function(t){return Be(this,this._map.remove(t))},Le.prototype.clear=function(){return Be(this,this._map.clear())},Le.prototype.union=function(){var t=sr.call(arguments,0);return t=t.filter(function(t){return 0!==t.size}),0===t.length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations(function(e){for(var r=0;t.length>r;r++)i(t[r]).forEach(function(t){return e.add(t)})}):this.constructor(t[0])},Le.prototype.intersect=function(){var t=sr.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return i(t)});var e=this;return this.withMutations(function(r){e.forEach(function(e){t.every(function(t){return t.includes(e)})||r.remove(e)})})},Le.prototype.subtract=function(){var t=sr.call(arguments,0);if(0===t.length)return this;t=t.map(function(t){return i(t)});var e=this;return this.withMutations(function(r){e.forEach(function(e){t.some(function(t){return t.includes(e)})&&r.remove(e)})})},Le.prototype.merge=function(){return this.union.apply(this,arguments)},Le.prototype.mergeWith=function(t){var e=sr.call(arguments,1);return this.union.apply(this,e)},\nLe.prototype.sort=function(t){return Je(we(this,t))},Le.prototype.sortBy=function(t,e){return Je(we(this,e,t))},Le.prototype.wasAltered=function(){return this._map.wasAltered()},Le.prototype.__iterate=function(t,e){var r=this;return this._map.__iterate(function(e,n){return t(n,n,r)},e)},Le.prototype.__iterator=function(t,e){return this._map.map(function(t,e){return e}).__iterator(t,e)},Le.prototype.__ensureOwner=function(t){if(t===this.__ownerID)return this;var e=this._map.__ensureOwner(t);return t?this.__make(e,t):(this.__ownerID=t,this._map=e,this)},Le.isSet=Te;var Zr=\"@@__IMMUTABLE_SET__@@\",$r=Le.prototype;$r[Zr]=!0,$r[_r]=$r.remove,$r.mergeDeep=$r.merge,$r.mergeDeepWith=$r.mergeWith,$r.withMutations=Cr.withMutations,$r.asMutable=Cr.asMutable,$r.asImmutable=Cr.asImmutable,$r.__empty=Ce,$r.__make=We;var tn;t(Je,Le),Je.of=function(){return this(arguments)},Je.fromKeys=function(t){return this(r(t).keySeq())},Je.prototype.toString=function(){return this.__toString(\"OrderedSet {\",\"}\")},Je.isOrderedSet=Ne;var en=Je.prototype;en[cr]=!0,en.__empty=He,en.__make=Pe;var rn;t(Ve,rt),Ve.of=function(){return this(arguments)},Ve.prototype.toString=function(){return this.__toString(\"Stack [\",\"]\")},Ve.prototype.get=function(t,e){var r=this._head;for(t=l(this,t);r&&t--;)r=r.next;return r?r.value:e},Ve.prototype.peek=function(){return this._head&&this._head.value},Ve.prototype.push=function(){if(0===arguments.length)return this;for(var t=this.size+arguments.length,e=this._head,r=arguments.length-1;r>=0;r--)e={value:arguments[r],next:e};return this.__ownerID?(this.size=t,this._head=e,this.__hash=void 0,this.__altered=!0,this):Qe(t,e)},Ve.prototype.pushAll=function(t){if(t=n(t),0===t.size)return this;ft(t.size);var e=this.size,r=this._head;return t.reverse().forEach(function(t){e++,r={value:t,next:r}}),this.__ownerID?(this.size=e,this._head=r,this.__hash=void 0,this.__altered=!0,this):Qe(e,r)},Ve.prototype.pop=function(){return this.slice(1)},Ve.prototype.unshift=function(){return this.push.apply(this,arguments)},Ve.prototype.unshiftAll=function(t){\nreturn this.pushAll(t)},Ve.prototype.shift=function(){return this.pop.apply(this,arguments)},Ve.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Xe()},Ve.prototype.slice=function(t,e){if(d(t,e,this.size))return this;var r=m(t,this.size),n=g(e,this.size);if(n!==this.size)return rt.prototype.slice.call(this,t,e);for(var i=this.size-r,o=this._head;r--;)o=o.next;return this.__ownerID?(this.size=i,this._head=o,this.__hash=void 0,this.__altered=!0,this):Qe(i,o)},Ve.prototype.__ensureOwner=function(t){return t===this.__ownerID?this:t?Qe(this.size,this._head,t,this.__hash):(this.__ownerID=t,this.__altered=!1,this)},Ve.prototype.__iterate=function(t,e){if(e)return this.reverse().__iterate(t);for(var r=0,n=this._head;n&&t(n.value,r++,this)!==!1;)n=n.next;return r},Ve.prototype.__iterator=function(t,e){if(e)return this.reverse().__iterator(t);var r=0,n=this._head;return new S(function(){if(n){var e=n.value;return n=n.next,z(t,r++,e)}return I()})},Ve.isStack=Ye;var nn=\"@@__IMMUTABLE_STACK__@@\",on=Ve.prototype;on[nn]=!0,on.withMutations=Cr.withMutations,on.asMutable=Cr.asMutable,on.asImmutable=Cr.asImmutable,on.wasAltered=Cr.wasAltered;var un;e.Iterator=S,Fe(e,{toArray:function(){ft(this.size);var t=Array(this.size||0);return this.valueSeq().__iterate(function(e,r){t[r]=e}),t},toIndexedSeq:function(){return new ie(this)},toJS:function(){return this.toSeq().map(function(t){return t&&\"function\"==typeof t.toJS?t.toJS():t}).__toJS()},toJSON:function(){return this.toSeq().map(function(t){return t&&\"function\"==typeof t.toJSON?t.toJSON():t}).__toJS()},toKeyedSeq:function(){return new ne(this,!0)},toMap:function(){return ct(this.toKeyedSeq())},toObject:function(){ft(this.size);var t={};return this.__iterate(function(e,r){t[r]=e}),t},toOrderedMap:function(){return Zt(this.toKeyedSeq())},toOrderedSet:function(){return Je(u(this)?this.valueSeq():this)},toSet:function(){return Le(u(this)?this.valueSeq():this)},toSetSeq:function(){return new oe(this);\n},toSeq:function(){return s(this)?this.toIndexedSeq():u(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Ve(u(this)?this.valueSeq():this)},toList:function(){return Bt(u(this)?this.valueSeq():this)},toString:function(){return\"[Iterable]\"},__toString:function(t,e){return 0===this.size?t+e:t+\" \"+this.toSeq().map(this.__toStringMapper).join(\", \")+\" \"+e},concat:function(){var t=sr.call(arguments,0);return be(this,ye(this,t))},includes:function(t){return this.some(function(e){return X(e,t)})},entries:function(){return this.__iterator(Sr)},every:function(t,e){ft(this.size);var r=!0;return this.__iterate(function(n,i,o){return t.call(e,n,i,o)?void 0:(r=!1,!1)}),r},filter:function(t,e){return be(this,fe(this,t,e,!0))},find:function(t,e,r){var n=this.findEntry(t,e);return n?n[1]:r},forEach:function(t,e){return ft(this.size),this.__iterate(e?t.bind(e):t)},join:function(t){ft(this.size),t=void 0!==t?\"\"+t:\",\";var e=\"\",r=!0;return this.__iterate(function(n){r?r=!1:e+=t,e+=null!==n&&void 0!==n?\"\"+n:\"\"}),e},keys:function(){return this.__iterator(gr)},map:function(t,e){return be(this,ae(this,t,e))},reduce:function(t,e,r){ft(this.size);var n,i;return arguments.length<2?i=!0:n=e,this.__iterate(function(e,o,u){i?(i=!1,n=e):n=t.call(r,n,e,o,u)}),n},reduceRight:function(t,e,r){var n=this.toKeyedSeq().reverse();return n.reduce.apply(n,arguments)},reverse:function(){return be(this,he(this,!0))},slice:function(t,e){return be(this,pe(this,t,e,!0))},some:function(t,e){return!this.every($e(t),e)},sort:function(t){return be(this,we(this,t))},values:function(){return this.__iterator(wr)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(t,e){return v(t?this.toSeq().filter(t,e):this)},countBy:function(t,e){return ce(this,t,e)},equals:function(t){return F(this,t)},entrySeq:function(){var t=this;if(t._cache)return new j(t._cache);var e=t.toSeq().map(Ze).toIndexedSeq();return e.fromEntrySeq=function(){return t.toSeq()},e},filterNot:function(t,e){\nreturn this.filter($e(t),e)},findEntry:function(t,e,r){var n=r;return this.__iterate(function(r,i,o){return t.call(e,r,i,o)?(n=[i,r],!1):void 0}),n},findKey:function(t,e){var r=this.findEntry(t,e);return r&&r[0]},findLast:function(t,e,r){return this.toKeyedSeq().reverse().find(t,e,r)},findLastEntry:function(t,e,r){return this.toKeyedSeq().reverse().findEntry(t,e,r)},findLastKey:function(t,e){return this.toKeyedSeq().reverse().findKey(t,e)},first:function(){return this.find(y)},flatMap:function(t,e){return be(this,me(this,t,e))},flatten:function(t){return be(this,de(this,t,!0))},fromEntrySeq:function(){return new ue(this)},get:function(t,e){return this.find(function(e,r){return X(r,t)},void 0,e)},getIn:function(t,e){for(var r,n=this,i=ke(t);!(r=i.next()).done;){var o=r.value;if(n=n&&n.get?n.get(o,yr):yr,n===yr)return e}return n},groupBy:function(t,e){return _e(this,t,e)},has:function(t){return this.get(t,yr)!==yr},hasIn:function(t){return this.getIn(t,yr)!==yr},isSubset:function(t){return t=\"function\"==typeof t.includes?t:e(t),this.every(function(e){return t.includes(e)})},isSuperset:function(t){return t=\"function\"==typeof t.isSubset?t:e(t),t.isSubset(this)},keyOf:function(t){return this.findKey(function(e){return X(e,t)})},keySeq:function(){return this.toSeq().map(Ge).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},lastKeyOf:function(t){return this.toKeyedSeq().reverse().keyOf(t)},max:function(t){return Se(this,t)},maxBy:function(t,e){return Se(this,e,t)},min:function(t){return Se(this,t?tr(t):nr)},minBy:function(t,e){return Se(this,e?tr(e):nr,t)},rest:function(){return this.slice(1)},skip:function(t){return this.slice(Math.max(0,t))},skipLast:function(t){return be(this,this.toSeq().reverse().skip(t).reverse())},skipWhile:function(t,e){return be(this,le(this,t,e,!0))},skipUntil:function(t,e){return this.skipWhile($e(t),e)},sortBy:function(t,e){return be(this,we(this,e,t))},take:function(t){return this.slice(0,Math.max(0,t))},takeLast:function(t){return be(this,this.toSeq().reverse().take(t).reverse());\n},takeWhile:function(t,e){return be(this,ve(this,t,e))},takeUntil:function(t,e){return this.takeWhile($e(t),e)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=ir(this))}});var sn=e.prototype;sn[ar]=!0,sn[br]=sn.values,sn.__toJS=sn.toArray,sn.__toStringMapper=er,sn.inspect=sn.toSource=function(){return\"\"+this},sn.chain=sn.flatMap,sn.contains=sn.includes,Fe(r,{flip:function(){return be(this,se(this))},mapEntries:function(t,e){var r=this,n=0;return be(this,this.toSeq().map(function(i,o){return t.call(e,[o,i],n++,r)}).fromEntrySeq())},mapKeys:function(t,e){var r=this;return be(this,this.toSeq().flip().map(function(n,i){return t.call(e,n,i,r)}).flip())}});var an=r.prototype;an[hr]=!0,an[br]=sn.entries,an.__toJS=sn.toObject,an.__toStringMapper=function(t,e){return JSON.stringify(e)+\": \"+er(t)},Fe(n,{toKeyedSeq:function(){return new ne(this,!1)},filter:function(t,e){return be(this,fe(this,t,e,!1))},findIndex:function(t,e){var r=this.findEntry(t,e);return r?r[0]:-1},indexOf:function(t){var e=this.keyOf(t);return void 0===e?-1:e},lastIndexOf:function(t){var e=this.lastKeyOf(t);return void 0===e?-1:e},reverse:function(){return be(this,he(this,!1))},slice:function(t,e){return be(this,pe(this,t,e,!1))},splice:function(t,e){var r=arguments.length;if(e=Math.max(0|e,0),0===r||2===r&&!e)return this;t=m(t,0>t?this.count():this.size);var n=this.slice(0,t);return be(this,1===r?n:n.concat(p(arguments,2),this.slice(t+e)))},findLastIndex:function(t,e){var r=this.findLastEntry(t,e);return r?r[0]:-1},first:function(){return this.get(0)},flatten:function(t){return be(this,de(this,t,!1))},get:function(t,e){return t=l(this,t),0>t||this.size===1/0||void 0!==this.size&&t>this.size?e:this.find(function(e,r){return r===t},void 0,e)},has:function(t){return t=l(this,t),t>=0&&(void 0!==this.size?this.size===1/0||this.size>t:-1!==this.indexOf(t))},interpose:function(t){return be(this,ge(this,t))},interleave:function(){var t=[this].concat(p(arguments)),e=Ie(this.toSeq(),k.of,t),r=e.flatten(!0);return e.size&&(r.size=e.size*t.length),\nbe(this,r)},keySeq:function(){return $(0,this.size)},last:function(){return this.get(-1)},skipWhile:function(t,e){return be(this,le(this,t,e,!1))},zip:function(){var t=[this].concat(p(arguments));return be(this,Ie(this,rr,t))},zipWith:function(t){var e=p(arguments);return e[0]=this,be(this,Ie(this,t,e))}}),n.prototype[fr]=!0,n.prototype[cr]=!0,Fe(i,{get:function(t,e){return this.has(t)?t:e},includes:function(t){return this.has(t)},keySeq:function(){return this.valueSeq()}}),i.prototype.has=sn.includes,i.prototype.contains=i.prototype.includes,Fe(x,r.prototype),Fe(k,n.prototype),Fe(A,i.prototype),Fe(et,r.prototype),Fe(rt,n.prototype),Fe(nt,i.prototype);var hn={Iterable:e,Seq:O,Collection:tt,Map:ct,OrderedMap:Zt,List:Bt,Stack:Ve,Set:Le,OrderedSet:Je,Record:Ae,Range:$,Repeat:G,is:X,fromJS:H};return hn});",
    "import {Currency, SUPPORTED_CURRENCIES} from './currency';\nimport {assert, assertIsNumber, Immutable, PRecord} from './util';\n\n\n/**\n * Account: Represents a bank account, credit card, or a concept like \"Cash\"\n */\nexport class Account extends PRecord({\n    id: null,\n    name: \"\",\n    initialBalance: 0,\n    /** the ISO 4217 currency code */\n    currencyCode: \"USD\",\n    /* Arbitrary data defined by the user */\n    metadata: Immutable.Map(),\n}) {\n    constructor(values) {\n        super(Account.cleanArgs(values));\n    }\n\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n        assert(this.currency instanceof Currency); // Check that currencyCode is valid.\n        assertIsNumber(this.initialBalance);\n        assert(this.metadata instanceof Immutable.Map);\n    }\n\n    /** Get the currency of this account. */\n    get currency() { return SUPPORTED_CURRENCIES[this.currencyCode]; }\n\n    /**\n     * Given a JS object which may be JSON-serializable, convert it to the proper\n     * fully-typed, immutable representation required to initialize or modify\n     * an Account object.\n     *\n     * The result of this function can be passed to the Account constructor\n     * or to the .merge() method.\n     *\n     * @param {Object} values - Values for the fields of this account\n     * @returns {Object} - Cleaned values for the fields of this account\n     */\n    static cleanArgs(values) {\n        values = Object.assign({}, values); // Don't modify the parameter; create a copy\n        if ('metadata' in values && !(values.metadata instanceof Immutable.Map)) {\n            values.metadata = Immutable.fromJS(values.metadata);\n        }\n        return values;\n    }\n}\n",
    "import PDate from './pdate';\nimport {Account} from './account';\nimport {Category, CategoryGroup} from './category';\nimport {Currency, SUPPORTED_CURRENCIES} from './currency';\nimport {Transaction} from './transaction';\nimport {__, assert, assertIsNumber, PRecord, Immutable} from './util';\n\n\n// Private constants used to create private fields on a Record subclass:\n// Unfortunately we cannot use Symbols, since Immutable.Record keys must be strings.\n// The value of these strings doesn't matter, as long as they're unique.\n\n/** Key for private field containing OrderedMap of accounts */\nconst _accounts = \"^a\";\n/** Key for private field containing Map of categories */\nconst _categories = \"^c\";\n/** Key for private field containing OrderedMap of category groups */\nconst _categoryGroups = \"^g\";\n/** Key for private field containing OrderedMap of transactions */\nconst _transactions = \"^n\";\n\n// Private symbols used for other attributes that aren't formal fields:\nconst _accountBalances = Symbol();\nconst _transactionAccountBalances = Symbol();\n\n\n// Prophecy/Budget class version\n// The major version should be changed when backwards compatibility is broken.\n// The minor version should be changed when new features are added in a backwards-compatible way.\nexport const majorVersion = 0;\nexport const minorVersion = 1;\n\n/**\n * Class that describes a budget.\n *\n * A budget is a set of spending plans and actual transactions \n * for a specific a period of time.\n */\nexport class Budget extends PRecord({\n    id: null,\n\n    name: __(\"New Budget\"),\n\n    /** Start date of the budget. Always of type PDate, and always less than or equal to end date. */\n    startDate: null,\n    /** End date of the budget. Always of type PDate, and always greater than or equal to start date. */\n    endDate: null,\n\n    /** \n     * ISO 4217 currency code for the budget. Individual accounts may use different currencies.\n     * This setting does not directly have any effect as far as Prophecy is concerned, but it\n     * is useful to apps working with the budget.\n     *\n     * It's best to read this value as a Currency object using the 'currency' getter.\n     */\n    currencyCode: 'USD',\n    \n    /** Ordered map of Accounts, in a custom order specified by the user. See accounts() getter. */\n    [_accounts]: Immutable.OrderedMap(),\n\n    /** Map of Categories, keyed by ID, ordered by category group order, and in a custom order within each group. See categories() getter. */\n    [_categories]: Immutable.OrderedMap(),\n    \n    /** Ordered map of CategoryGroups, in a custom order specified by the user. See categoryGroups() getter. */\n    [_categoryGroups]: Immutable.OrderedMap(),\n\n    /** _transactions: Stores transactions. See transactions() getter. */\n    [_transactions]: Immutable.OrderedMap(), // kept private so we can carefully control insertion logic. We don't want to allow budget.set('transactions', ...)\n}) {\n\n    constructor(values) {\n        values = Object.assign({}, values || {}); // Don't modify the argument itself\n        // Budget must always have a valid date range:\n        if (values.startDate === undefined || values.endDate === undefined) {\n            const year = PDate.today().year;\n            values.startDate = values.startDate || PDate.create(year, 0, 1);\n            values.endDate = values.endDate || PDate.create(year, 11, 31);\n        }\n        // Allow passing 'accounts' into the constructor. It can be any iterable with Account-typed values\n        if (values.accounts !== undefined) {\n            // Don't trust the keys (if any) of values.accounts; create new keys:\n            values[_accounts] = new Immutable.OrderedMap(Immutable.Seq.Indexed(values.accounts).map(a => [a.id, a]));\n            delete values.accounts;\n        }\n        // Allow passing 'categoryGroups' into the constructor. It can be any iterable with CategoryGroup-typed values.\n        if (values.categoryGroups !== undefined) {\n            values[_categoryGroups] = new Immutable.OrderedMap(Immutable.Seq.Indexed(values.categoryGroups).map(cg => [cg.id, cg]));\n            delete values.categoryGroups;\n        }\n        // Allow passing 'categories' into the constructor. It can be any iterable with Category-typed values\n        if (values.categories !== undefined) {\n            // Don't trust the keys (if any) of values.categories; create new keys.\n            // Also ensure that all categories are sorted by group in the same order as CategoryGroups is sorted.\n            values[_categories] = _createOrderedCategoryMap(values.categories, values[_categoryGroups]);\n            delete values.categories;\n        }\n        // Allow passing 'transactions' into the constructor. It can be any iterable with Transaction-typed values\n        if (values.transactions !== undefined) {\n            assert(values[_transactions] === undefined); // We expect 'transactions' or _transactions, but not both.\n            // Don't trust the keys (if any) or the ordering of values.transactions; create new keys and force a sort:\n            values[_transactions] = new Immutable.OrderedMap(\n                Immutable.Seq.Indexed(values.transactions).sortBy(Budget.transactionSorter).map(t => [t.id, t])\n            );\n            delete values.transactions;\n        }\n        super(values);\n    }\n\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n        assert(this.currency instanceof Currency, \"currencyCode must be valid\");\n        assert(this.startDate instanceof PDate);\n        assert(this.endDate instanceof PDate);\n        assert(+this.endDate >= +this.startDate);\n        assert(this.accounts instanceof Immutable.OrderedMap);\n        this.accounts.forEach(account => assert(account instanceof Account));\n        assert(this.categoryGroups instanceof Immutable.OrderedMap);\n        this.categoryGroups.forEach(category => assert(category instanceof CategoryGroup));\n        assert(this.categories instanceof Immutable.OrderedMap);\n        this.categories.forEach(category => {\n            assert(category instanceof Category);\n            category.assertIsValidForBudget(this);\n        });\n        assert(this.transactions instanceof Immutable.OrderedMap);\n        this.transactions.forEach(transaction => {\n            assert(transaction instanceof Transaction);\n            transaction.assertIsValidForBudget(this);\n        });\n    }\n\n    /** Get the currency of this budget. */\n    get currency() { return SUPPORTED_CURRENCIES[this.currencyCode]; }\n\n    /** Ordered list of Accounts, in custom order */\n    get accounts() { return this[_accounts]; }\n\n    /** Map of categories, keyed by ID. Not in order. */\n    get categories() { return this[_categories]; }\n\n    /** Ordered list of CategoryGroups, in custom order */\n    get categoryGroups() { return this[_categoryGroups]; }\n\n    /**\n     * Delete a category.\n     * \n     * Any transactions linked to this category will have their category set to null.\n     * \n     * @param {number} id - ID of the category to delete\n     * @returns {Budget} - A new Budget with the desired change.\n     */\n    deleteCategory(id) {\n        // Change all Transaction references to that category to null:\n        const transactions = this[_transactions].map(\n            t => t.set('detail', t.detail.map(d => d.update('categoryId', categoryId => categoryId === id ? null : categoryId)))\n        );\n        return this.merge({\n            [_categories]: this[_categories].delete(id),\n            [_transactions]: transactions,\n        });\n    }\n\n    /**\n     * Insert or update a category\n     * \n     * If category.id is in the list of category groups, this will be an update.\n     * If category.id is not in the list of category groups, this will add a new group.\n     *\n     * This method cannot be used to change the order of categories (use positionCategory).\n     *\n     * @param {Account} category - The category to add/modify\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    updateCategory(category) {\n        assert(category instanceof Category);\n        assertIsNumber(category.id);\n        const origCategory = this.categories.get(category.id);\n        if (origCategory === undefined || origCategory.groupId !== category.groupId) {\n            // The group ID has changed. We need to carefully ensure that this.categories\n            // stays sorted, first by group order, then in custom order, with the modified\n            // category at the end of its new category group\n            let categories = this.categories.delete(category.id).set(category.id, category); // Move/insert category to the end\n            categories = _createOrderedCategoryMap(categories.valueSeq(), this.categoryGroups);\n            return this.set(_categories, categories);\n        }\n        return this.set(_categories, this[_categories].set(category.id, category));\n    }\n\n    /**\n     * Change a category's position within its category group\n     *\n     * @param {number} categoryId ID of the category to move\n     * @param {number} newIndex New position within its category group (0 = first)\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    positionCategory(categoryId, newIndex) {\n        assertIsNumber(categoryId);\n        assertIsNumber(newIndex);\n        const category = this.categories.get(categoryId);\n        assert(category instanceof Category);\n        const groupCategories = this.categories.filter(cat => cat.groupId === category.groupId);\n        assert(newIndex >=0 && newIndex <= groupCategories.size);\n\n        // this.categories is ordered first by category group order, then by custom order within each group.\n        // Our goal is to move the category around within the group, but keep the overall map still sorted\n        // by group.\n\n        const currentIndexOverall = this.categories.keySeq().keyOf(categoryId);\n        const currentIndexWithinGroup = groupCategories.keySeq().keyOf(categoryId);\n        const newIndexOverall = currentIndexOverall + (newIndex - currentIndexWithinGroup);\n\n        const newCategories = new Immutable.OrderedMap(\n            this.categories.toList().filter(cat => cat.id !== categoryId).insert(newIndexOverall, category).map(a => [a.id, a])\n        );\n        return this.set(_categories, newCategories);\n    }\n\n    /**\n     * Delete a category group. It must be empty!\n     * @param {number} id - ID of the category group to delete\n     * @returns {Budget} - A new Budget with the desired change.\n     */\n    deleteCategoryGroup(id) {\n        assert(this.categories.filter(cat => cat.groupId === id).isEmpty(), \"Only empty category groups can be deleted.\");\n        return this.set(_categoryGroups, this[_categoryGroups].delete(id));\n    }\n\n    /**\n     * Insert or update a category group.\n     * \n     * If categoryGroup.id is in the list of category groups, this will be an update.\n     * If categoryGroup.id is not in the list of category groups, this will add a new group.\n     *\n     * This method cannot be used to change the order of category groups (use positionCategoryGroup).\n     *\n     * @param {Account} categoryGroup - The category group to add/modify\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    updateCategoryGroup(categoryGroup) {\n        assert(categoryGroup instanceof CategoryGroup);\n        assertIsNumber(categoryGroup.id);\n        return this.set(_categoryGroups, this[_categoryGroups].set(categoryGroup.id, categoryGroup));\n    }\n\n    /**\n     * Change a category group's position in the list of category groups\n     *\n     * @param {number} groupId ID of the category group to move\n     * @param {number} newIndex New position in the list of category groups (0 = first)\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    positionCategoryGroup(groupId, newIndex) {\n        assertIsNumber(groupId);\n        assertIsNumber(newIndex);\n        const categoryGroup = this.categoryGroups.get(groupId);\n        assert(categoryGroup instanceof CategoryGroup);\n        const newCategoryGroups = new Immutable.OrderedMap(\n            this.categoryGroups.toList().filter(g => g.id !== groupId).insert(newIndex, categoryGroup).map(a => [a.id, a])\n        );\n        return this.set(_categoryGroups, newCategoryGroups);\n    }\n\n    /**\n     * Delete an account\n     * @param {number} id - ID of the account to delete\n     * @returns {Budget} - A new Budget with the desired change.\n     */\n    deleteAccount(id) {\n        // Change all Transaction references to that account to null:\n        const transactions = this[_transactions].map(t => {\n            if (t.accountId == id) {\n                return t.set(\"accountId\", null);\n            }\n            return t;\n        });\n        return this.merge({\n            [_accounts]: this[_accounts].delete(id),\n            [_transactions]: transactions,\n        });\n    }\n\n    /**\n     * updateAccount: Insert or update an account.\n     * \n     * If newAccount.id is in the list of accounts, this will be an update.\n     * If newAccount.id is not in the list of accounts, this will add a new account.\n     *\n     * This method cannot be used to change the order of accounts (use positionAccount).\n     *\n     * @param {Account} newAccount - The account to add/modify\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    updateAccount(newAccount) {\n        assert(newAccount instanceof Account);\n        assertIsNumber(newAccount.id);\n        const newAccounts = this[_accounts].set(newAccount.id, newAccount);\n        return this.set(_accounts, newAccounts);\n    }\n\n    /**\n     * positionAccount: Change an account's position in the list of accounts\n     *\n     * @param {number} accountId ID of the account to move\n     * @param {number} newIndex New position in the list of accounts (0 = first)\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    positionAccount(accountId, newIndex) {\n        assertIsNumber(accountId);\n        assertIsNumber(newIndex);\n        const account = this.accounts.get(accountId);\n        assert(account instanceof Account);\n        const newAccounts = new Immutable.OrderedMap(\n            this.accounts.toList().filter(a => a.id !== accountId).insert(newIndex, account).map(a => [a.id, a])\n        );\n        return this.set(_accounts, newAccounts);\n    }\n\n    /**\n     * Ordered list of Transactions, always in chronological order (oldest first; null dates go last)\n     * @returns {OrderedMap}\n     */\n    get transactions() { return this[_transactions]; }\n    /**\n     * Delete a transaction\n     * @param {number} id - ID of the transaction to delete\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    deleteTransaction(id) { return this.set(_transactions, this[_transactions].delete(id)); }\n    /**\n     * updateTransaction: Insert or update a transaction.\n     * \n     * If newTransaction.id is in the list of transactions, this will be an update.\n     * If newTransaction.id is not in the list of transactions, this will add it.\n     *\n     * @param {Transaction} newTransaction - The transaction to insert/modify.\n     * @returns {Budget} A new Budget with the desired change.\n     */\n    updateTransaction(newTransaction) {\n        assert(newTransaction instanceof Transaction, \"expected Transaction\");\n        assertIsNumber(newTransaction.id, \"Transaction instances must have numeric ID.\");\n        assert(newTransaction.accountId === null || this.accounts.has(newTransaction.accountId), \"accountId must be valid.\");\n        const id = newTransaction.id;\n        let sortRequired = true;\n        if (this[_transactions].has(id)) {\n            // We are replacing an existing value:\n            const oldTransaction = this[_transactions].get(id);\n            // We'll only need to re-sort transactions if the date has changed:\n            sortRequired = (newTransaction.date !== +oldTransaction.date);\n        } else {\n            // We are inserting a new value.\n            // Sort it into the correct spot, unless 'date' is null, in which\n            // case it can just be appended to the end of the list.\n            sortRequired = newTransaction.date !== null;\n        }\n        let newTransactions = this[_transactions].set(id, newTransaction);\n        if (sortRequired) {\n            newTransactions = newTransactions.sortBy(Budget.transactionSorter);\n        }\n        return this.set(_transactions, newTransactions);\n    }\n\n    /**\n     * _computeBalances: Private method that computes the balance of each account as well\n     * as the running total of the relevant account as of each transaction.\n     */\n    _computeBalances() {\n        assert(this[_accountBalances] === undefined, \"_computeBalances() should only run once per Budget instance.\");\n        // Get the initial balance of each account:\n        const accountBalances = this.accounts.map(account => account.initialBalance).toJS();\n        const transactionBalances = {};\n\n        // Use accountBalances[null] to represents the total 'amount' of transactions that\n        // have no account set. The currency of this amount is unknonwn so the absolute\n        // amount is meaningless; we mostly care if it's zero or not.\n        accountBalances[null] = 0;\n\n        for (let transaction of this.transactions.filterNot(t => t.pending).values()) {\n            const balance = accountBalances[transaction.accountId] += transaction.amount; // Note that transaction.accountId may be null\n            if (transaction.accountId) { // Only define a \"running balance for this account as of this transaction\" if there is an accountId\n                transactionBalances[transaction.id] = balance;\n            }\n        }\n        // We cache the results and make them immutable. We don't have to worry about cache\n        // invalidation; any change to Budget will create a new object with an empty cache.\n        this[_accountBalances] = Object.freeze(accountBalances);\n        this[_transactionAccountBalances] = Object.freeze(transactionBalances);\n    }\n\n    /** Get an object which contains balance of each account keyed by accountId, considering all non-pending transactions */\n    get accountBalances() {\n        if (this[_accountBalances] === undefined) {\n            this._computeBalances();\n        }\n        return this[_accountBalances];\n    }\n\n    /** \n     * Get the balance of any account as of the specified transaction.\n     * Only non-pending transactions with a date are considered.\n     * \n     * @param {number} transactionId - The transaction to use as a reference point\n     * @param {number} accountId - the account whose balance to return\n     * @returns {number|undefined} The balance of the specified account as of the specified transaction\n     **/\n    accountBalanceAsOfTransaction(transactionId, accountId) {\n        const transactions = this.transactions.filter(txn => txn.date !== null && txn.pending === false);\n        const transaction = transactions.get(transactionId);\n        const account = this.accounts.get(accountId);\n        assert(account !== undefined);\n        if (transaction === undefined) {\n            return undefined; // Probably a pending transaction or one without a date.\n        }\n        if (this[_accountBalances] === undefined) {\n            this._computeBalances();\n        }\n\n        if (transaction.accountId == accountId) {\n            return this[_transactionAccountBalances][transactionId];\n        } else {\n            // Account balances are computed per transaction.\n            // Find the most recent preceding transaction associated with the specified account,\n            // and return the account balance as of that transaction.\n            const index = transactions.keySeq().keyOf(transactionId); // The index of the specified transaction\n            const precedingTransactions = transactions.valueSeq().slice(0, index);\n            const lastAccountTransaction = precedingTransactions.findLast(txn => txn.accountId === accountId);\n            if (lastAccountTransaction) {\n                return this[_transactionAccountBalances][lastAccountTransaction.id];\n            } else {\n                return account.initialBalance;\n            }\n        }\n    }\n\n    /**\n     * Given a date, get the balance of all categories, up to and including that date.\n     *\n     * @param {PDate} date - The date\n     * @returns {Immutable.Map} - The balance of all categories as of that date, as a map where\n     *        the key is the category ID and the value is the balance of that category.\n     */\n    categoryBalancesOnDate(date) {\n        assert(date instanceof PDate);\n        assert(date >= this.startDate);\n        assert(date <= this.endDate);\n        return Immutable.Map().withMutations(map => {\n            for (let txn of this.transactions.values()) {\n                if (txn.date > date) {\n                    break;\n                }\n                txn.detail.forEach(d => map.set(d.categoryId, map.get(d.categoryId, 0) + d.amount));\n            }\n        });\n    }\n\n    /**\n     * Given a date, get the balance of the specified category, up to and including that date.\n     *\n     * @param {number} categoryId - The ID of the category\n     * @param {PDate} date - The date\n     * @returns {number} - The balance of the specified category as of that date\n     */\n    categoryBalanceByDate(categoryId, date) {\n        assert(this.categories.has(categoryId));\n        return this.categoryBalancesOnDate(date).get(categoryId, 0);\n    }\n\n    /**\n     * Given a date, get the budget of each category, up to and including that date.\n     *\n     * @param {PDate} date - The date\n     * @returns {Immutable.Map} - The budget of all categories as of that date, as a map where\n     *        the key is the category ID and the value is the budget amount of that category.\n     */\n    categoryBudgetsOnDate(date) {\n        let transactionCategoryBalances = null;\n        assert(date instanceof PDate);\n        assert(date >= this.startDate);\n        assert(date <= this.endDate);\n        return Immutable.Map().withMutations(map => {\n            for (let category of this.categories.values()) {\n                let budgetAmount = 0;\n                if (category.isAutomatic) {\n                    if (transactionCategoryBalances === null) {\n                        transactionCategoryBalances = this.categoryBalancesOnDate(date);\n                    }\n                    budgetAmount = transactionCategoryBalances.get(category.id, 0);\n                } else {\n                    category.rules.forEach(rule => {\n                        budgetAmount += rule.amount * rule.countOccurrencesBetween(this.startDate, date);\n                    });\n                }\n                map.set(category.id, budgetAmount);\n            }\n        });\n    }\n\n    toJS() {\n        let result = super.toJS();\n        // Remove private keys:\n        delete result[_accounts];\n        delete result[_categories];\n        delete result[_categoryGroups];\n        delete result[_transactions];\n        // Add accounts as a correctly-ordered array:\n        result.accounts = this.accounts.toList().toJS();\n        // Add categories as an array:\n        result.categories = this.categories.toList().toJS();\n        // Add category groups as a correctly-ordered array:\n        result.categoryGroups = this.categoryGroups.toList().toJS();\n        // Add transactions as a correctly-ordered array:\n        result.transactions = this.transactions.toList().toJS();\n        // Add version information\n        // Major version should only change if backwards compatibility is broken.\n        result.version = {major: majorVersion, minor: minorVersion};\n        return result;\n    }\n\n    /**\n     * Convert from a JSON-friendly native JavaScript object (or JSON) to a Budget instance.\n     * @param {Object} obj - JSON or JavaScript serialized representation of an instance of this Budget.\n     * @returns {Object} - New instance of this Budget.\n     */\n    static fromJS(obj) {\n        // The JS serialization won't be typed, but the constructor expects types like Catgory, Transaction, etc:\n        const values = Object.assign({}, obj);\n        for (let dateField of ['startDate', 'endDate']) {\n            if (values[dateField] !== null) {\n                assertIsNumber(values[dateField]);\n                values[dateField] = new PDate(values[dateField]);\n            }\n        }\n        const typedLists = [\n            {key: \"accounts\", type: Account},\n            {key: \"categories\", type: Category},\n            {key: \"categoryGroups\", type: CategoryGroup},\n            {key: \"transactions\", type: Transaction},\n        ];\n        for (let {key, type} of typedLists) {\n            values[key] = values[key].map(entry => type.fromJS(entry));\n        }\n        return new this(values);\n    }\n\n    static transactionSorter(transaction) {\n        return (+transaction.date || 999999); // Sort 'null' dates after the highest date\n    }\n}\n\n/** \n * Given any iterable of Categories, generate a properly sorted OrderedMap.\n * \n * Categories should be ordered by group (in the custom order that category\n * groups are in), and then secondarily by the custom order (whatever order\n * they're currently in in the passed iterable.)\n * \n * @param {Category[]} categories - Iterable of categories\n * @param {CategoryGroup[]} categoryGroups - The groups that the categories\n *        need to be sorted by. The groups should be in a custom order.\n * \n * @returns {Immutable.OrderedMap} OrderedMap of categories.\n */\nfunction _createOrderedCategoryMap(categories, categoryGroups) {\n    const categoryGroupIdsOrdered = categoryGroups.keySeq();\n    return new Immutable.OrderedMap(\n        Immutable.Seq.Indexed(categories).sortBy(category =>\n            categoryGroupIdsOrdered.keyOf(category.groupId)\n        ).map(c => [c.id, c])\n    );\n}\n",
    "import {Currency, SUPPORTED_CURRENCIES} from './currency';\nimport {default as PDate} from './pdate';\nimport {assert, assertIsNumber, assertPositiveIntegerOrNull, PRecord, Immutable} from './util';\n\n\nexport const CategoryRulePeriod = Object.freeze({\n    Day: 2,\n    Week: 3,\n    Month: 4,\n    Year: 5,\n});\n\nconst allowedRuleValues = Object.keys(CategoryRulePeriod).map(k => CategoryRulePeriod[k]); // = [2, 3, 4, 5]\n\nexport class CategoryRule extends PRecord({\n    amount: 0.0,\n    /** Start date for this rule, if any. */\n    startDate: null,\n    /** End date for this rule, if any. Must be after startDate but need not be within the budget period. */\n    endDate: null,\n    /** repeatN: If this rule is \"Repeat every 6 weeks\", this will be 6. If period is null, this value is meaningless. */\n    repeatN: 1,\n    /** period: one of the CategoryRulePeriod values or null (for spending that happens on one day or randomly throughout the budget) */\n    period: null,\n\n    // Possible future addition: round up to nearest business day, nearest Thursday, etc.\n\n}) {\n    constructor(values) {\n        super(CategoryRule.cleanArgs(values));\n    }\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n        assertIsNumber(this.amount);\n        assertIsNumber(this.repeatN);\n        assert((this.repeatN>>>0) === this.repeatN, \"repeatN must be a positive integer.\");\n        assert(this.startDate === null || this.startDate instanceof PDate);\n        assert(this.endDate === null || this.endDate instanceof PDate);\n        assert(this.period === null || allowedRuleValues.includes(this.period), \"period must be null or one of the allowed period constants.\");\n    }\n\n    /**\n     * countOccurrencesBetween: Based on this rule, determine how many times this amount is repeated\n     * between dateBegin and DateEnd.\n     *\n     * For example, if startDate is 2014-01-01, endDate is null, repeatN is 1, and period is Month\n     * (repeat every month from Jan 1, 2014 onward), then counOccurrencesBetween(2016-01-01, 2016-12-31)\n     * will return 12.\n     * @param {PDate} dateBegin - Start date of the period in question (inclusive)\n     * @param {PDate} dateEnd - End date of the period in question (inclusive)\n     * @returns {number}\n     */\n    countOccurrencesBetween(dateBegin, dateEnd) {\n        assert(dateBegin instanceof PDate);\n        assert(dateEnd instanceof PDate);\n        assert(dateEnd >= dateBegin);\n\n        // Short circuit checks:\n        if (this.startDate && dateEnd < this.startDate) {\n            return 0; // This rule doesn't start until after the date range in question has ended.\n        }\n        if (this.endDate && dateBegin > this.endDate) {\n            return 0; // This rule ended before the date range in question began\n        }\n        if (this.period === null) {\n            // This is not a repeating rule. We only have to consider startDate and endDate, which we did just above.\n            return 1;\n        }\n\n        // Step 1: Compute the # of occurrences between this.startDate (if set) and the earlier of [this.endDate, dateEnd]\n        const firstDay = this.startDate || dateBegin; \n        const lastDay = (this.endDate && this.endDate < dateEnd) ? this.endDate : dateEnd;\n        const daysDiff = Math.max(0, lastDay - firstDay); // daysDiff should never be negative\n\n        let result = null;\n        if (this.period === CategoryRulePeriod.Day) {\n            result = Math.floor(daysDiff / this.repeatN) + 1; // Never return a negative value\n        } else if (this.period === CategoryRulePeriod.Week) {\n            result = Math.floor(daysDiff/(this.repeatN * 7))+1;  // Note: we know repeatN > 0\n        } else if (this.period === CategoryRulePeriod.Month) {\n            const months = (lastDay.year - firstDay.year)*12\n                         + (lastDay.month - firstDay.month)\n                         + (lastDay.day >= firstDay.day ? 1 : 0);\n            result = Math.floor((months-1)/this.repeatN)+1; // Note that when repeatN = 1, this simplifies to 'result = months'\n        } else if (this.period === CategoryRulePeriod.Year) {\n            result = (lastDay.year - firstDay.year) + (lastDay.month > firstDay.month || (lastDay.month == firstDay.month && lastDay.day >= firstDay.day) ? 1 : 0);\n        } else {\n            throw \"invalid period\";\n        }\n\n        // Step 2: if dateBegin falls after this.startDate, subtract the number of occurrences\n        // between this.startDate and the day before dateBegin:\n        if (firstDay < dateBegin) {\n            result -= this.countOccurrencesBetween(firstDay, new PDate(dateBegin - 1));\n        }\n        return result;\n    }\n\n    /**\n     * Given a JS object which may be JSON-serializable, convert it to the proper\n     * fully-typed, immutable representation required to initialize or modify\n     * a CategoryRule object.\n     *\n     * The result of this function can be passed to the CategoryRule constructor\n     * or to the .merge() method.\n     *\n     * @param {Object} values - Values for the fields of this CategoryRule\n     * @returns {Object} - Cleaned values for the fields of this CategoryRule\n     */\n    static cleanArgs(values) {\n        values = Object.assign({}, values); // Don't modify the parameter; create a copy\n        if ('startDate' in values && values.startDate !== null && !(values.startDate instanceof PDate)) {\n            values.startDate = new PDate(values.startDate);\n        }\n        if ('endDate' in values && values.endDate !== null && !(values.endDate instanceof PDate)) {\n            values.endDate = new PDate(values.endDate);\n        }\n        return values;\n    }\n}\n\n/**\n * Category: Represents a category of spending, such as \"Rent\", \"Groceries\", \"Insurance\", etc.\n */\nexport class Category extends PRecord({\n    id: null,\n    name: \"\",\n    /**\n     * Rules: a set of Rule objects defining expected spending in this category such as \"$10 per day\"\n     *\n     * If rules === null, this is an \"Automatic\" category, which means that the total amount expected\n     * to be spent over the budget period should be computed from existing + pending transactions\n     * in this category\n     *\n     * If rules is a List (even an empty list), then it the total amount to be spent during the budget\n     * is to be calculated based on the rules. (Or is $0 if the rules list is empty)\n     */\n    rules: null,\n    /** Notes - custom text editable by the user */\n    notes: \"\",\n    /** the ISO 4217 currency code */\n    currencyCode: \"USD\",\n    /** Which CategoryGroup this category belongs to. */\n    groupId: null,\n    /** Metadata - meaning depends on the user/application */\n    metadata: Immutable.Map(),\n}) {\n    constructor(values) {\n        super(Category.cleanArgs(values));\n    }\n\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n        assertPositiveIntegerOrNull(this.id);\n        assertPositiveIntegerOrNull(this.groupId);\n        if (this.rules !== null) {\n            assert(this.rules instanceof Immutable.List);\n            this.rules.forEach(rule => { assert(rule instanceof CategoryRule) });\n        }\n        assert(this.currency instanceof Currency); // Check that currencyCode is valid.\n        assert(this.metadata instanceof Immutable.Map);\n    }\n\n    _validate(context) {\n        // Group must be valid\n        if (this.groupId === null || !context.budget.categoryGroups.has(this.groupId)) {\n            context.addError(\"Every Category must be assigned to a valid CategoryGroup.\");\n        }\n        // Ensure that no rules overlap:\n        if (this.rules !== null) {\n            this.rules.forEach((rule, i) => {\n                this.rules.forEach((otherRule, j) => {\n                    if (i !== j) {\n                        const otherStartDate = otherRule.startDate || context.budget.startDate;\n                        const otherEndDate = otherRule.endDate || context.budget.endDate;\n                        if (rule.countOccurrencesBetween(otherStartDate, otherEndDate) !== 0) {\n                            context.addError('rules', \"A budget category's rules must not overlap.\");\n                        }\n                    }\n                });\n            });\n        }\n    }\n\n    /** Is this an \"automatic\" category (see 'rules' attribute)? */\n    get isAutomatic() { return this.rules === null; }\n\n    /** Get the currency of this category. */\n    get currency() { return SUPPORTED_CURRENCIES[this.currencyCode]; }\n\n    /**\n     * Given a JS object which may be JSON-serializable, convert it to the proper\n     * fully-typed, immutable representation required to initialize or modify\n     * a Category object.\n     *\n     * The result of this function can be passed to the Category constructor\n     * or to the .merge() method.\n     *\n     * @param {Object} values - Values for the fields of this category\n     * @returns {Object} - Cleaned values for the fields of this category\n     */\n    static cleanArgs(values) {\n        values = Object.assign({}, values); // Don't modify the parameter; create a copy\n        if ('rules' in values && values.rules !== null) {\n            // 'rules' can be any iterable with CategoryRule-typed values or\n            // objects used to initialize CategoryRule\n            values.rules = new Immutable.List(values.rules.map(\n                d => d instanceof CategoryRule ? d : new CategoryRule(d)\n            ));\n        }\n        if ('metadata' in values && !(values.metadata instanceof Immutable.Map)) {\n            values.metadata = Immutable.fromJS(values.metadata);\n        }\n        return values;\n    }\n}\n\n/**\n * CategoryGroup: Represents an ordered group of categories.\n */\nexport class CategoryGroup extends PRecord({\n    /** Unique integer ID of this category group */\n    id: null,\n    /** The name of this category group */\n    name: \"\",\n}) {\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n    }\n}\n",
    "import {__, assertIsNumber} from './util';\n\nconst _CODE = Symbol(\"code\"); // Internal key used to make 'code' read-only\n\n\n/** Class that describes a real-world currency. */\nexport class Currency {\n    /**\n     * Create a currency description.\n     * @param {string} code - the ISO 4217 currency code (three characters)\n     * @param {string} name - the full name of the currency (\"Canadian Dollar\")\n     * @param {string[]} symbols - the symbols for this currency in order from most to least\n     *                           ambiguous (e.g. [\"$\", \"CA$\"])\n     * @param {number} decimals - The maximum number of decimal places that this currency can\n     *                            support (e.g. '2' means $0.01 is the smallest amount.)\n     */\n    constructor(code, name, symbols, decimals = 2) {\n        this[_CODE] = code;\n        this.name = name;\n        this.symbols = symbols;\n        this.decimals = decimals;\n    }\n    /**\n     * Get the ISO 4217 currency code (uniquely identifies this currency)\n     * @return {string} The ISO 4217 currency code.\n     */\n    get code() { return this[_CODE]; }\n\n    /**\n     * Round a given amount of this currency to the minimum supported value.\n     * For dollars, this will round to the nearest $0.01\n     * This is not meant for cash transactions, where the rounding rules are different\n     * (https://en.wikipedia.org/wiki/Cash_rounding for more details on that).\n     * This is generally the same as integer rounding because currency amounts are represented\n     * as floating-point numbers multiplied by the minimal number of decimal places the currency\n     * supports - so $3.2105 is stored as '321.05' and rounded to '312' or $3.21 exactly.\n     * @param {number} amount - The amount/value to round.\n     * @returns {number} The rounded amount/value.\n     */\n    roundAmount(amount) { return Math.round(amount); }\n\n    /**\n     * Custom JSON serialization\n     * @returns {string} - This currency's currency code.\n     */\n    toJSON() { return this.code; }\n}\n\n\n/** Global constant map listing supported currencies. */\nexport const SUPPORTED_CURRENCIES = Object.freeze({\n    CAD: new Currency(\"CAD\", __(\"Canadian dollar\"), [\"$\", \"C$\"]),\n    EUR: new Currency(\"EUR\", __(\"Euro\"), [\"€\"]),\n    USD: new Currency(\"USD\", __(\"United States dollar\"), [\"$\", \"US$\"]),\n    JPY: new Currency(\"JPY\", __(\"Japanese yen\"), [\"¥\"], 0),\n    XBT: new Currency(\"XBT\", __(\"Bitcoin\"), [\"\\u20BF\"], 8),\n});\n\n\nexport class CurrencyFormatter {\n    constructor(defaultCurrency, locales = undefined) {\n        this.defaultCurrency = defaultCurrency;\n        this.locales = locales || 'en'; // Define a default locale for consistency\n        // Cached NumberFormat instances, keyed by currency code:\n        this.rawFormatters = {};\n        this.formatters = {};\n    }\n\n    /**\n     * Given an amount and a Currency, format the amount appropriately as a plain text string.\n     * Note: it would be nice to just use toLocaleString() as follows:\n     *    amount.toLocaleString(\"en-US\", {style: \"currency\", currency: \"CAD\"})\n     * However, that does not support Bitcoin.\n     * @param {number} amount - the amount to format\n     * @param {Currency=} currency - one of the currencies from SUPPORTED_CURRENCIES (optional)\n     * @return {string} The amount, formatted as a string.\n     */\n    formatAmount(amount, currency = undefined) {\n        assertIsNumber(amount);\n        if (currency === undefined) {\n            currency = this.defaultCurrency;\n        }\n        let formatter = this.formatters[currency.code];\n        if (formatter === undefined) {\n            formatter = this.formatters[currency.code] = new Intl.NumberFormat(this.locales, {\n                style: \"currency\",\n                // The currency argument is supposed to be the ISO 4217 currency code, but\n                // according to the spec (http://www.ecma-international.org/ecma-402/1.0/#sec-6.3)\n                // if we pass an unknown currency code, the 'currency' agument is used as the\n                // symbol. So pass a generic/fake code, and we'll later replace it with the\n                // correct symbol. That way, we get the symbol in the correct place for the\n                // user's locale, but we can also support currencies like Bitcoin that the\n                // Javascript runtime may not natively support.\n                currency: \"XCC\",\n                minimumFractionDigits: Math.min(2, currency.decimals),\n                maximumFractionDigits: currency.decimals,\n            });\n            let symbol = currency.symbols[0];\n            const isDefaultCurrency = (currency.code === this.defaultCurrency.code);\n            const symbolConflicts = (!isDefaultCurrency && symbol == this.defaultCurrency.symbols[0]);\n            if (symbolConflicts && currency.symbols.length > 1) {\n                symbol = currency.symbols[1];\n            }\n            formatter.symbol = symbol;  // Store the symbol in the formatter as a custom property\n        }\n        return formatter.format(amount * Math.pow(10, -currency.decimals)).replace(\"XCC\", formatter.symbol);\n    }\n\n    /**\n     * Given an amount and a Currency, format the amount as a plain text string with no symbol.\n     * @param {number} amount - the amount to format\n     * @param {Currency=} currency - one of the currencies from SUPPORTED_CURRENCIES (optional)\n     * @return {string} The amount, formatted as a string, but without any currency symbol.\n     */\n    formatAmountRaw(amount, currency = undefined) {\n        assertIsNumber(amount);\n        if (currency === undefined) {\n            currency = this.defaultCurrency;\n        }\n        let formatter = this.rawFormatters[currency.code];\n        if (formatter === undefined) {\n            formatter = this.rawFormatters[currency.code] = new Intl.NumberFormat(this.locales, {\n                minimumFractionDigits: Math.min(2, currency.decimals),\n                maximumFractionDigits: currency.decimals,\n            });\n        }\n        return formatter.format(amount * Math.pow(10, -currency.decimals));\n    }\n}\n",
    "import {assert, assertIsNumber} from './util';\n\nconst MONTHS = Object.freeze({\n    JAN: 0,\n    FEB: 1,\n    MAR: 2,\n    APR: 3,\n    MAY: 4,\n    JUN: 5,\n    JUL: 6,\n    AUG: 7,\n    SEP: 8,\n    OCT: 9,\n    NOV: 10,\n    DEC: 11,\n});\n\nconst DAYS = Object.freeze({\n    SUN: 0,\n    MON: 1,\n    TUE: 2,\n    WED: 3,\n    THU: 4,\n    FRI: 5,\n    SAT: 6,\n});\n\nconst MONTH_SUMS_NORMAL_YEAR = Object.freeze([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);\nconst MONTH_SUMS_LEAP_YEAR = Object.freeze([0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]);\n\n// The following maps convert from day of the year (e.g. 0 for Jan. 1) to month ('A' = Jan, 'B' = Feb, ...)\n// These maps are precomputed to make the date class highly efficient.\nconst NORMAL_YEAR = (\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\" +\n    \"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\" +\n    \"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\" +\n    \"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\"\n);\nconst LEAP_YEAR = (\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\" +\n    \"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\" +\n    \"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\" +\n    \"JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\"\n);\n\nconst DAYS_PER_MONTH = Object.freeze([\n    /* Jan */ 31,    undefined, /* Mar */ 31, /* Apr */ 30, /* May */ 31, /* Jun */ 30,\n    /* Jul */ 31, /* Aug */ 31, /* Sep */ 30, /* Oct */ 31, /* Nov */ 30, /* Dec */ 31\n]);\n\n/** \n * Internal helper method.\n * Given a year, month, and day triplet, return\n * the number of days between January 1, 2000 and the given date.\n *\n * @param {number} year - Year (e.g. 2012)\n * @param {number} month - Month (0 for January, 11 for December)\n * @param {number} day - Day (1-31)\n * @returns {number}\n */\nfunction triplet_to_days_value(year, month, day) {\n    assert(year >= 2000 && year <= 3000, \"Year is invalid - must be between 2000 and 3000.\");\n    assert(month >= MONTHS.JAN && month <= MONTHS.DEC, \"Month is invalid.\");\n    assert(day > 0 && day <= PDate.daysInMonth(year, month));\n    const nyear = (year - 2000|0);\n    let days_value = (nyear*365) + ((nyear + 3)/4|0) - ((nyear+99)/100|0) + ((nyear + 399)/400|0);\n    // Compute the number of days between the first day of the year and the first day of the month:\n    days_value += PDate.isLeapYear(year) ? MONTH_SUMS_LEAP_YEAR[month] : MONTH_SUMS_NORMAL_YEAR[month];\n    days_value += day - 1;\n    return days_value;\n}\n\n// Symbol used for almost-private access to the value inside PDate objects.\nconst days_value_key = Symbol(\"value\");\n\nexport default class PDate {\n    /**\n     * Construct a Date from a triple of year, month (0-11), day (1-31)\n     * @param {number} year - Year (e.g. 2012)\n     * @param {number} month - Month (0 for January, 11 for December)\n     * @param {number} day - Day (1-31)\n     * @returns {PDate}\n     */\n    static create(year, month, day) {\n        return new PDate(triplet_to_days_value(year, month, day));\n    }\n    /**\n     * Construct a Date from an ISO 8601 date string \"YYYY-MM-DD\" or \"YYYYMMDD\"\n     * @param {string} str - An ISO 8601 date string\n     * @returns {PDate}\n     */\n    static fromString(str) {\n        const year = parseInt(str.substr(0, 4));\n        let month = NaN;\n        let day = NaN;\n        if (str.length === 10 && str.charAt(4) === '-' && str.charAt(7) === '-') {\n            // YYYY-MM-DD format, presumably:\n            month = parseInt(str.substr(5, 2));\n            day = parseInt(str.substr(8, 2));\n        } else if (str.length === 8 && String(parseInt(str)) === str) { // Without 'String(parseInt(str)) === str', '05/05/05' would pass this length test\n            month = parseInt(str.substr(4, 2));\n            day = parseInt(str.substr(6, 2));\n        }\n        if (isNaN(year) || isNaN(month) || isNaN(day)) {\n            throw \"Date string not in YYYY-MM-DD or YYYYMMDD format\";\n        }\n        return new PDate(triplet_to_days_value(year, month - 1, day));\n    }\n    /**\n     * Parse a template string literal, e.g. const D = PDate.parseTemplateLiteral; const date1 = D`2016-01-01`;\n     * @param {Object} strings Well-formed template call site object\n     * @param {...*} keys - substitution values\n     * @returns {PDate}\n     */\n    static parseTemplateLiteral(strings, ...keys) {\n        return PDate.fromString(String.raw(strings, ...keys));\n    }\n    /**\n     * Get the current date, according to the system's local time\n     * @returns {PDate}\n     */\n    static today() {\n        const js_date = new Date();\n        return new PDate(triplet_to_days_value(js_date.getYear() + 1900, js_date.getMonth(), js_date.getDate()));\n    }\n\n    /**\n     * Construct a PDate instance using its internal int representation (# of days since the millenium)\n     * @param {Number} daysSinceMillenium - number representing the date\n     */\n    constructor(daysSinceMillenium) {\n        assertIsNumber(daysSinceMillenium);\n        assert(daysSinceMillenium >= 0);\n        assert(daysSinceMillenium <= 365615); // Corresponds to Dec. 31, 3000\n        // Store the daysSinceMillenium value into the private field that backs the .value property:\n        this[days_value_key] = daysSinceMillenium;\n        // Simpler, but far slower:\n        // Object.defineProperty(this, \"_days_value\", {value: daysSinceMillenium, writable: false});\n    }\n\n    /**\n     * Custom JSON serialization\n     * @returns {number}\n     */\n    toJSON() { return this.value; }\n\n    /**\n     * Custom serialization when used with Immutable.js\n     * @returns {number}\n     */\n    toJS() { return this.value; }\n\n    /**\n     * Get the year (2000-3000)\n     * @returns {number}\n     */\n    get year() {\n        // This formula is valid for any year 2000 or later\n        const centuries = this[days_value_key] / 36525 | 0;\n        return (2000 + (this.value + centuries - (centuries/4|0)) / 365.25) |0;\n    }\n    /**\n     * Get the month (0-11)\n     * @returns {number}\n     */\n    get month() {\n        const nyear = this.year - 2000;\n        // Compute the number of days between January 1, 2000 and the first day of the given year:\n        const d = (nyear*365) + ((nyear + 3)/4|0) - ((nyear+99)/100|0) + ((nyear + 399)/400|0);\n        const A = 'A'.charCodeAt(0);\n        if (PDate.isLeapYear(nyear)) // Note: isLeapYear() works with an absolute year ('2015') or relative to 2000 ('15')\n            return LEAP_YEAR.charCodeAt(this.value - d) - A;\n        else\n            return NORMAL_YEAR.charCodeAt(this.value - d) - A;\n    }\n    /**\n     * Get the day of the month (1-31)\n     * @returns {number}\n     */\n    get day() {\n        return this.value - triplet_to_days_value(this.year, this.month, 1) + 1;\n    }\n\n    /** Get the day of the week (0 = Sunday, 6 = Saturday) */\n    get dayOfWeek() { return (this.value + 6) % 7; }\n    /** Get the day of the year (0-365) */\n    get dayOfYear() { return this.value - triplet_to_days_value(this.year, 0, 1); }\n    /** Get the internal date value (days since 2000-01-01) */\n    get value() { return this[days_value_key]; }\n\n    /**\n     * Get the date as an ISO 8601 string (\"2015-01-25\")\n     * @returns {string}\n     */\n    toString() {\n        const year = this.year, month = this.month + 1, day = this.day;\n        return year.toString() + (month < 10 ? \"-0\" : \"-\") + month + (day < 10 ? \"-0\" : \"-\") + day;\n    }\n\n    /**\n     * Get the primitive value (enables correct sorting and comparison) \n     * Except note that equality checking won't work unless you coerce values\n     * e.g. PDate.create(2010, 1, 1) == PDate.create(2010, 1, 1) : false\n     * e.g. PDate.create(2010, 1, 1) == +PDate.create(2010, 1, 1) : true\n     * @returns {number}\n     */\n    valueOf() { return this.value; }\n\n    /**\n     * Helper method: how many days are in the specified month of the specified year?\n     * @param {number} year - Year\n     * @param {number} month - Month (0-11)\n     * @returns {number}\n     */\n    static daysInMonth(year, month) {\n        assert(year >= 2000 && year <= 3000);\n        assert(month >= MONTHS.JAN && month <= MONTHS.DEC, \"Month is invalid.\");\n        if (month === MONTHS.FEB) {\n            return PDate.isLeapYear(year) ? 29 : 28;\n        }\n        return DAYS_PER_MONTH[month];\n    }\n    /**\n     * Is 'year' a leap year? Can be an absolute year (e.g. 2016) or relative to the millenium (e.g. 16).\n     * @param {number} year - The year in question\n     * @returns {boolean}\n     */\n    static isLeapYear(year) { year=year|0; return (year % 4 == 0) && (year % 100 != 0 || year % 400 == 0); }\n\n    // Constants\n    static get DAYS() { return DAYS; }\n    static get MONTHS() { return MONTHS; }\n}\n",
    "/**\n * Prophecy Engine JavaScript API\n *\n * All of these classes should be namespaced within a 'Prophecy' global.\n */\nexport {PRecord, Immutable} from './util';\n\nexport {Account} from './account';\nexport {Budget} from './budget';\nexport {Category, CategoryGroup, CategoryRule, CategoryRulePeriod} from './category';\nexport {Currency, CurrencyFormatter, SUPPORTED_CURRENCIES} from './currency';\nexport {default as PDate} from './pdate';\nexport {Transaction, TransactionDetail} from './transaction';\n\nexport {reducer, inverter} from './redux/prophecy_redux';\nimport * as _actions from './redux/actions';\nexport const actions = _actions;\n\nimport {majorVersion, minorVersion} from './budget';\nexport const version = {major: majorVersion, minor: minorVersion};\n",
    "const prefix = 'PRPHCY_';\nexport const PROPHECY_ACTION_PREFIX = prefix;\n\n////////////////////////////////////////////////////////////////////////////////\n// Miscellaneous actions\n\n/**\n * NOOP:\n * Action that does nothing.\n *\n * This is generated as the inverse of an action that had no effect.\n */\nexport const NOOP = prefix + 'NOOP';\n\n////////////////////////////////////////////////////////////////////////////////\n// Budget settings\n\n/**\n * SET_CURRENCY:\n * Action to change the currency of this budget.\n *\n * Arguments:\n *  - currencyCode (string): New ISO 4217 currency code (e.g. 'USD')\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const SET_CURRENCY = prefix + 'SET_CURRENCY';\n\n/**\n * SET_DATE:\n * Action to change the start and/or end date of this budget.\n *\n * Arguments:\n *  - startDate (int): PDate value for the start date, cast to integer (optional)\n *  - endDate (int): PDate value for the end date, cast to integer (optional)\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const SET_DATE = prefix + 'SET_DATE';\n\n/**\n * SET_NAME:\n * Action to change the name of this budget.\n *\n * Arguments:\n *  - name (string): New name of the budget\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const SET_NAME = prefix + 'SET_NAME';\n\n////////////////////////////////////////////////////////////////////////////////\n// Accounts\n\n/**\n * DELETE_ACCOUNT:\n * Action to delete an account. Will set the 'accountId' of any linked transactions to null.\n *\n * Arguments:\n *  - id (int): The ID of the account to delete\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const DELETE_ACCOUNT = prefix + 'DELETE_ACCT';\n\n/**\n * UPDATE_ACCOUNT:\n * Action to create/modify an account\n *\n * Arguments:\n *  - id (int): The ID of the account to create/modify\n *  - data (object): fields to set on the new/modifed account (optional)\n *  - budgetId (string): ID of the budget (optional)\n *  - index (int): Index/position of the account in the list (optional)\n *  - linkNullTransactions (Array): Array of transaction IDs whose accountId will be\n *    set to this account's ID if (1) that transaction's accountId is null, and (2)\n *    this is an account insertion (not update). This parameter mostly exists so\n *    that DELETE_ACCOUNT can be inverted to a single action. (optional)\n */\nexport const UPDATE_ACCOUNT = prefix + 'UPDATE_ACCT';\n\n////////////////////////////////////////////////////////////////////////////////\n// Categories\n\n/**\n * DELETE_CATEGORY:\n * Action to delete a category.\n *\n * Arguments:\n *  - id (int): The ID of the category to delete\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const DELETE_CATEGORY = prefix + 'DELETE_CAT';\n\n/**\n * UPDATE_CATEGORY:\n * Action to create/modify a category\n *\n * Arguments:\n *  - id (int): The ID of the category to create/modify\n *  - data (object): fields to set on the new/modifed category (optional)\n *  - budgetId (string): ID of the budget (optional)\n *  - index (int): Index/position of the category within the group (optional)\n *  - linkTransactionDetails (Array): Array of tuples of [transaction ID, details index]\n *    that identifies TransactionDetails entries whose categoryId will be\n *    set to this category's ID if (1) that transaction's categoryId is null, and (2)\n *    this is an category insertion (not update). This parameter mostly exists so\n *    that DELETE_CATEGORY can be inverted to a single action. (optional)\n */\nexport const UPDATE_CATEGORY = prefix + 'UPDATE_CAT';\n\n////////////////////////////////////////////////////////////////////////////////\n// Category Groups\n\n/**\n * DELETE_CATEGORY_GROUP:\n * Action to delete a category group. It must not contain any categories.\n *\n * Arguments:\n *  - id (int): The ID of the category group to delete\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const DELETE_CATEGORY_GROUP = prefix + 'DELETE_CG';\n\n/**\n * UPDATE_CATEGORY_GROUP:\n * Action to create/modify a category group\n *\n * Arguments:\n *  - id (int): The ID of the category group to create/modify\n *  - data (object): fields to set on the new/modifed category group (optional)\n *  - budgetId (string): ID of the budget (optional)\n *  - index (int): Index/position of the category group in the list (optional)\n */\nexport const UPDATE_CATEGORY_GROUP = prefix + 'UPDATE_CG';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Transactions\n\n/**\n * DELETE_TRANSACTION:\n * Action to delete a transaction\n *\n * Arguments:\n *  - id (int): The ID of the transaction to delete\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const DELETE_TRANSACTION = prefix + 'DELETE_TXN';\n\n/**\n * UPDATE_TRANSACTION:\n * Action to create/modify a transaction\n *\n * Arguments:\n *  - id (int): The ID of the transaction to create/modify\n *  - data (object): fields to set on the new/modifed transactions\n *  - budgetId (string): ID of the budget (optional)\n */\nexport const UPDATE_TRANSACTION = prefix + 'UPDATE_TXN';\n\n/**\n * UPDATE_MULTIPLE_TRANSACTIONS\n * Action to atomically update multiple transactions.\n * \n * This is the only \"compound action\" that itself contains\n * multiple other actions. \"Compound actions\" are kept to a minimum\n * in order to make it easier for other reducers to watch for\n * changes using actions. (e.g. if there were a generic MULTIPLE_ACTIONS\n * action, a reducer that wanted to watch for changes to the budget name\n * would have to watch for both SET_NAME and MULTIPLE_ACTIONS containing\n * SET_NAME).\n *\n * Arguments:\n *  - subActions (array): array of UPDATE_TRANSACTION and DELETE_TRANSACTION\n *       actions to carry out as part of this action.\n *  - budgetId (string): ID of the budget (optional)\n **/\nexport const UPDATE_MULTIPLE_TRANSACTIONS = prefix + 'UPDATE_MANY_TXN';\n",
    "import {assert, assertIsNumber} from '../util';\nimport {Account, Budget, Category, CategoryGroup, PDate, Transaction} from '../prophecy';\nimport * as ACTION from './actions';\n\n/**\n * The reducer for prophecy. Used to make the Prophecy engine work within a redux app.\n * @param {Budget} state - the state to modify\n * @param {Object} action - the action to apply to the state, if applicable\n * @returns {Budget} - returns the state, with any resulting modifications\n */\nexport function reducer(state = new Budget(), action) {\n\n    // Basic checks:\n    if (!action.type.startsWith(ACTION.PROPHECY_ACTION_PREFIX)) {\n        // This is not a prophecy-specific action\n        return state;\n    }\n    if (action.budgetId !== undefined && action.budgetId !== state.id) {\n        // This action does not apply to this particular budget\n        return state;\n    }\n\n    switch (action.type) {\n\n    case ACTION.SET_CURRENCY: {\n        return state.set('currencyCode', action.currencyCode);\n    }\n\n    case ACTION.SET_DATE: {\n        const changes = {};\n        for (let dateKey of ['startDate', 'endDate']) {\n            if (dateKey in action) {\n                changes[dateKey] = new PDate(action[dateKey]);\n            }\n        }\n        return state.merge(changes);\n    }\n\n    case ACTION.SET_NAME: {\n        return state.set('name', action.name);\n    }\n\n    // Account actions:\n\n    case ACTION.DELETE_ACCOUNT: {\n        return state.deleteAccount(action.id);\n    }\n\n    case ACTION.UPDATE_ACCOUNT: {\n        assertIsNumber(action.id);\n        const existingAccount = state.accounts.get(action.id);\n        const acct = existingAccount || new Account({id: action.id});\n        let newState = state;\n        if (action.data) {\n            assert(!('id' in action.data));\n            newState = newState.updateAccount(acct.merge(action.data));\n        }\n        if (action.linkNullTransactions) {\n            // Implement the \"linkNullTransactions\" param, required to make DELETE_ACCOUNT fully invertable:\n            assert(existingAccount === undefined); // linkNullTransactions is only allowed for Account insertions\n            const nullTransactions = newState.transactions.filter(t => t.accountId == null);\n            action.linkNullTransactions.forEach(txnId => {\n                const txn = nullTransactions.get(txnId);\n                if (txn) {\n                    newState = newState.updateTransaction(txn.set('accountId', action.id));\n                }\n            });\n        }\n        if ('index' in action) {\n            assertIsNumber(action.index);\n            newState = newState.positionAccount(action.id, action.index);\n        }\n        return newState;\n    }\n\n    // Category actions:\n\n    case ACTION.DELETE_CATEGORY: {\n        return state.deleteCategory(action.id);\n    }\n\n    case ACTION.UPDATE_CATEGORY: {\n        assertIsNumber(action.id);\n        const existingCategory = state.categories.get(action.id);\n        const category = existingCategory || new Category({id: action.id});\n        let newState = state;\n        if (action.data) {\n            assert(!('id' in action.data));\n            newState = newState.updateCategory(category.merge(Category.cleanArgs(action.data)));\n        }\n        if ('index' in action) {\n            assertIsNumber(action.index);\n            newState = newState.positionCategory(action.id, action.index);\n        }\n        if (action.linkTransactionDetails) {\n            // Implement the \"linkTransactionDetails\" param, required to make DELETE_CATEGORY fully invertable:\n            assert(existingCategory === undefined); // linkTransactionDetails is only allowed for Category insertions\n            // linkTransactionDetails is a list of tuples of [transaction ID, index into transaction.detail list]\n            action.linkTransactionDetails.forEach(([txnId, detailsIndex]) => {\n                const txn = newState.transactions.get(txnId);\n                if (txn) {\n                    newState = newState.updateTransaction(txn.updateIn(['detail', detailsIndex, 'categoryId'], categoryId => categoryId === null ? action.id : categoryId));\n                }\n            });\n        }\n        return newState;\n    }\n\n    // Category Group actions:\n\n    case ACTION.DELETE_CATEGORY_GROUP: {\n        return state.deleteCategoryGroup(action.id);\n    }\n\n    case ACTION.UPDATE_CATEGORY_GROUP: {\n        assertIsNumber(action.id);\n        const existingGroup = state.categoryGroups.get(action.id);\n        const group = existingGroup || new CategoryGroup({id: action.id});\n        let newState = state;\n        if (action.data) {\n            assert(!('id' in action.data));\n            newState = newState.updateCategoryGroup(group.merge(action.data));\n        }\n        if ('index' in action) {\n            assertIsNumber(action.index);\n            newState = newState.positionCategoryGroup(action.id, action.index);\n        }\n        return newState;\n    }\n\n    // Transaction actions:\n\n    case ACTION.DELETE_TRANSACTION: {\n        return state.deleteTransaction(action.id);\n    }\n\n    case ACTION.UPDATE_TRANSACTION: {\n        assertIsNumber(action.id);\n        assert(!('id' in action.data));\n        const data = Transaction.cleanArgs(action.data);\n        const txn = state.transactions.get(action.id) || new Transaction({id: action.id});\n        return state.updateTransaction(txn.merge(data));\n    }\n\n    case ACTION.UPDATE_MULTIPLE_TRANSACTIONS: {\n        let newState = state;\n        action.subActions.forEach(subAction => {\n            assert(subAction.type === ACTION.UPDATE_TRANSACTION || subAction.type === ACTION.DELETE_TRANSACTION);\n            assert(subAction.budgetId === undefined || subAction.budgetId === state.id);\n            newState = reducer(newState, subAction);\n        });\n        return newState;\n    }\n\n    default:\n        return state;\n    }\n}\n\n/**\n * The action inverter for prophecy.\n * Given an action and a state, produce the inverse of 'action', such that\n * inverse(action(state)) = state\n *\n * This is used to build undo functionality that is relatively robust\n * when multiple users can simultaneously be emitting actions.\n *\n * @param {Budget} state - the state that is about to be modified by action\n * @param {Object} action - the action to invert\n * @returns {?Object} - An action (a JS object) or null, if the action cannot be inverted.\n */\nexport function inverter(state, action) {\n    // Inner function to generate the inverted action's parameters:\n    let result = (() => {\n        switch (action.type) {\n\n        case ACTION.NOOP: {\n            return {};\n        }\n\n        // Setting actions:\n\n        case ACTION.SET_CURRENCY: {\n            return {currencyCode: state.get('currencyCode')};\n        }\n\n        case ACTION.SET_DATE: {\n            const data = {};\n            for (let dateType of ['startDate', 'endDate']) {\n                if (dateType in action) {\n                    data[dateType] = +state[dateType];\n                }\n            }\n            return data;\n        }\n\n        case ACTION.SET_NAME: {\n            return {name: state.name};\n        }\n\n        // Account actions:\n\n        case ACTION.DELETE_ACCOUNT: {\n            const acct = state.accounts.get(action.id);\n            if (acct) {\n                const data = acct.toJS();\n                delete data.id;\n                // Restore the associated transactions that will have their accountId set null:\n                const linkNullTransactions = state.transactions.valueSeq().filter(t => t.accountId == action.id).map(t => t.id);\n                const index = state.accounts.keySeq().keyOf(action.id);\n                return {type: ACTION.UPDATE_ACCOUNT, id: action.id, data, linkNullTransactions, index};\n            }\n            return ACTION.NOOP;\n        }\n\n        case ACTION.UPDATE_ACCOUNT: {\n            const acct = state.accounts.get(action.id);\n            if (acct) {\n                // Generate the 'data' parameter required to undo this modification\n                // using another UPDATE_ACCOUNT action:\n                const acctJS = acct.toJS();\n                const inverse = {id: action.id};\n                if ('data' in action) {\n                    inverse.data = {};\n                    for (let key in action.data) {\n                        if (acctJS[key] !== action.data[key]) {\n                            inverse.data[key] = acctJS[key];\n                        }\n                    }\n                }\n                if ('index' in action) {\n                    // Was the index/position of this account on the account list changed?\n                    const oldIndex = state.accounts.keySeq().keyOf(action.id);\n                    if (action.index !== oldIndex) {\n                        inverse.index = oldIndex;\n                    }\n                }\n                return inverse;\n            } else {\n                // To undo this insertion, we need to delete the account:\n                return {type: ACTION.DELETE_ACCOUNT, id: action.id};\n            }\n        }\n\n        // Category actions:\n\n        case ACTION.DELETE_CATEGORY: {\n            const category = state.categories.get(action.id);\n            if (category) {\n                const data = category.toJS();\n                delete data.id;\n                // Restore the associated transaction details that will have their categoryId set null.\n                // We do this by including a list with tuples of (transaction ID, detail index).\n                const linkTransactionDetails = [];\n                state.transactions.forEach(txn => {\n                    txn.detail.forEach((detail, idx) => {\n                        if (detail.categoryId === category.id) {\n                            linkTransactionDetails.push([txn.id, idx]);\n                        }\n                    });\n                });\n                const index = state.categories.filter(cat => cat.groupId == category.groupId).keySeq().keyOf(action.id);\n                return {type: ACTION.UPDATE_CATEGORY, id: action.id, data, linkTransactionDetails, index};\n            }\n            return ACTION.NOOP;\n        }\n\n        case ACTION.UPDATE_CATEGORY: {\n            const category = state.categories.get(action.id);\n            if (category) {\n                // Generate the 'data' parameter required to undo this modification\n                // using another UPDATE_CATEGORY action:\n                const categoryJS = category.toJS();\n                const inverse = {id: action.id};\n                if ('data' in action) {\n                    inverse.data = {};\n                    for (let key in action.data) {\n                        if (categoryJS[key] !== action.data[key]) {\n                            inverse.data[key] = categoryJS[key];\n                        }\n                    }\n                }\n                if ('index' in action) {\n                    // Was the index/position of this category within the group changed?\n                    const oldIndex = state.categories.filter(cat => cat.groupId == category.groupId).keySeq().keyOf(action.id);\n                    if (action.index !== oldIndex) {\n                        inverse.index = oldIndex;\n                    }\n                }\n                return inverse;\n            } else {\n                // To undo this insertion, we need to delete the category:\n                return {type: ACTION.DELETE_CATEGORY, id: action.id};\n            }\n        }\n\n        // Category Group actions:\n\n        case ACTION.DELETE_CATEGORY_GROUP: {\n            const group = state.categoryGroups.get(action.id);\n            if (group) {\n                const data = group.toJS();\n                delete data.id;\n                return {type: ACTION.UPDATE_CATEGORY_GROUP, id: action.id, data};\n            }\n            return ACTION.NOOP;\n        }\n\n        case ACTION.UPDATE_CATEGORY_GROUP: {\n            const group = state.categoryGroups.get(action.id);\n            if (group) {\n                // Generate the 'data' parameter required to undo this modification\n                // using another UPDATE_CATEGORY_GROUP action:\n                const groupJS = group.toJS();\n                const inverse = {id: action.id};\n                if ('data' in action) {\n                    inverse.data = {};\n                    for (let key in action.data) {\n                        if (groupJS[key] !== action.data[key]) {\n                            inverse.data[key] = groupJS[key];\n                        }\n                    }\n                }\n                if ('index' in action) {\n                    // Was the index/position of this category group on changed?\n                    const oldIndex = state.categoryGroups.keySeq().keyOf(action.id);\n                    if (action.index !== oldIndex) {\n                        inverse.index = oldIndex;\n                    }\n                }\n                return inverse;\n            } else {\n                // To undo this insertion, we need to delete the category group:\n                return {type: ACTION.DELETE_CATEGORY_GROUP, id: action.id};\n            }\n        }\n\n        // Transaction actions:\n\n        case ACTION.DELETE_TRANSACTION: {\n            const txn = state.transactions.get(action.id);\n            if (txn) {\n                const data = txn.toJS();\n                delete data.id;\n                return {type: ACTION.UPDATE_TRANSACTION, id: action.id, data};\n            }\n            return ACTION.NOOP;\n        }\n\n        case ACTION.UPDATE_TRANSACTION: {\n            const txn = state.transactions.get(action.id);\n            if (txn) {\n                // Generate the 'data' parameter required to undo this modification\n                // using another UPDATE_TRANSACTION action:\n                const txnJS = txn.toJS();\n                let data = {};\n                for (let key in action.data) {\n                    if (txnJS[key] !== action.data[key]) {\n                        data[key] = txnJS[key];\n                    }\n                }\n                return {id: action.id, data};\n            } else {\n                // To undo this insertion, we need to delete the transaction:\n                return {type: ACTION.DELETE_TRANSACTION, id: action.id};\n            }\n        }\n\n        case ACTION.UPDATE_MULTIPLE_TRANSACTIONS: {\n            let inverseSubActions = [];\n            // Reverse iterate over action.subActions and invert each one:\n            let newState = state;\n            action.subActions.forEach(subAction => {\n                const inverseSubAction = inverter(newState, subAction);\n                delete inverseSubAction.budgetId; // Delete this since it's redundant\n                inverseSubActions.push(inverseSubAction);\n                newState = reducer(newState, subAction); // We need to update the state as we iterate the subActions in case any prior actions affect later ones.\n            });\n            inverseSubActions.reverse(); // The inverse actions should be applied in the opposite order\n            return {subActions: inverseSubActions};\n        }\n\n        }\n    })();\n\n    if (result) {\n        if (!result.type) {\n            result.type = action.type; // type defaults to the same action type\n        }\n        result.budgetId = state.id;\n        return result;\n    }\n    return null;\n}\n",
    "import {default as PDate} from './pdate';\nimport {assert, assertIsNumber, assertPositiveIntegerOrNull, PRecord, Immutable, __} from './util';\n\nexport const TransactionDetail = Immutable.Record({\n    amount: 0.0,\n    description: \"\",\n    categoryId: null,\n});\n\nconst M_AMOUNT = Symbol(\"amount\");\n\n/**\n * Transaction: Represents a change in the balance of an account.\n * Has an amount, who (who the money went to / came from), description,\n * category, and more.\n * e.g. '$20 from Chequing account went to SomeCo Inc. to buy a Widget'\n * Can be split - e.g. 'Sent $17 to Tom - $10 for gas and $7 for coffee'\n */\nexport class Transaction extends PRecord({\n    id: null,\n    date: null,\n    accountId: null,\n    who: \"\",\n    /** \n     * detail: The amount, description, and category of this transaction.\n     * Usually a single-item list except for split transactions.\n     */\n    detail: Immutable.List.of(new TransactionDetail()),\n    userId: null,\n    /**\n     * pending transactions affect the budget if their date is today or past.\n     * If their day is in the future, they don't.\n     * pending transactions never affect the account balances.\n     **/\n    pending: true,\n    /**\n     * isTransfer:\n     * Transfers between accounts (especially of different currencies) require special treatment.\n     *\n     * A typical transfer from e.g. \"Chequing to Savings\" would be represented as two transactions:\n     * One transaction with a negative amount and its accountId set to the chequing account, and\n     * one transaction with a positive amount and its accountId set to the savings account.\n     *\n     * This approach allows Prophecy to model complex transfers, e.g. where the money arrives\n     * in the destination account on a different day than it was sent from the first account\n     * (very common with e.g. credit card payments), or where the two accounts have different\n     * currencies.\n     *\n     * Transfer transactions must not have a budget category assigned, because they are not an expense\n     * nor income.\n     * \n     * In a single-currency budget, the sum of all transfer transactions should be zero.\n     * In a multi-currency budget, the sum of all transfer transactions may not be zero,\n     * even when converted to the same currency, because of losses due to currency conversion.\n     */\n    isTransfer: false,\n    /* Arbitrary data defined by the user */\n    metadata: Immutable.Map(),\n}) {\n\n    constructor(values) {\n        super(Transaction.cleanArgs(values));\n    }\n\n    /** Assertions to help enforce correct usage. */\n    _checkInvariants() {\n        assertPositiveIntegerOrNull(this.id);\n        assert(this.date === null || this.date instanceof PDate);\n        assertPositiveIntegerOrNull(this.accountId);\n        assert(this.detail instanceof Immutable.List);\n        assert(this.detail.size > 0);\n        this.detail.forEach(entry => {\n            assert(entry instanceof TransactionDetail);\n            assertIsNumber(entry.amount);\n            assert(typeof entry.description === 'string')\n            assertPositiveIntegerOrNull(entry.categoryId);\n        });\n        assert(this.metadata instanceof Immutable.Map);\n        if (this.isTransfer) {\n            this.detail.forEach(entry => assert(entry.categoryId === null, \"Do not set a category for transfer transactions.\"));\n        }\n    }\n\n    _validate(context) {\n        let account = null;\n        if (this.accountId !== null) {\n            // An accountID is set - is it valid?\n            account = context.budget.accounts.get(this.accountId);\n            if (!account) {\n                context.addError(\"Invalid account.\");\n            }\n        } else {\n            // The accountId is null - is that OK?\n            if (this.amount === 0 || this.pending) {\n                // Yes, that's fine. If the amount is $0 or the transaction is pending, the account does not matter.\n            } else {\n                context.addWarning(__(\"Set the account of this transaction.\"));\n            }\n        }\n        this.detail.forEach(detail => {\n            if (detail.categoryId !== null) {\n                const category = context.budget.categories.get(detail.categoryId, null);\n                if (category) {\n                    if (account) {\n                        // Check that the account's currency matches the category's currency\n                        if (account.currencyCode !== category.currencyCode) {\n                            context.addError(\"A Transaction's category's currency must match its account currency.\");\n                        }\n                    }\n                } else {\n                    context.addError(\"Invalid category.\");\n                }\n            } else {\n                // No category is set - is that OK?\n                if (this.amount === 0 || this.pending || this.isTransfer) {\n                    // Yes, that's fine.\n                } else {\n                    context.addWarning(__(\"This transaction is missing a category.\"));\n                }\n            }\n        });\n    }\n\n    /** Is this a split transaction? */\n    get isSplit() { return this.detail.size > 1; }\n\n    /** Get the sum of the amounts of the 'detail' entries */\n    get amount() {\n        if (this[M_AMOUNT] === undefined) {\n            this[M_AMOUNT] = this.detail.reduce((acc, detailEntry) => acc + detailEntry.amount, 0);\n        }\n        return this[M_AMOUNT];\n    }\n\n    /**\n     * Given a JS object which may be JSON-serializable, convert it to the proper\n     * fully-typed, immutable representation required to initialize or modify\n     * a Transaction object.\n     *\n     * The result of this function can be passed to the Transaction constructor\n     * or to the .merge() method.\n     *\n     * @param {Object} values - Values for the fields of this transaction\n     * @returns {Object} - Cleaned values for the fields of this transaction\n     */\n    static cleanArgs(values) {\n        values = Object.assign({}, values); // Don't modify the parameter; create a copy\n        if ('date' in values && values.date !== null && !(values.date instanceof PDate)) {\n            values.date = new PDate(values.date);\n        }\n        if ('detail' in values) {\n            // 'detail' can be any iterable with TransactionDetail-typed values or\n            // objects used to initialize TransactionDetail\n            values.detail = new Immutable.List(values.detail.map(\n                d => d instanceof TransactionDetail ? d : new TransactionDetail(d)\n            ));\n        }\n        if ('metadata' in values && !(values.metadata instanceof Immutable.Map)) {\n            values.metadata = Immutable.fromJS(values.metadata);\n        }\n        return values;\n    }\n\n}\n",
    "import {default as Imm} from 'immutable/dist/immutable.min.js';\nexport const Immutable = Imm; // Not sure why \"export {default as Immutable} from 'immutable'\" isn't working\n\n/**\n * Throw an error if the given condition is ever false.\n *\n * @param {boolean} cond - Condition that is expected to be true\n * @param {string} [msg] - Message to display if this assertion fails\n */\nexport function assert(cond, msg) {\n    if (!cond) {\n        throw Error(msg || \"Assertion Failed\");\n    }\n}\n\n/**\n * Throw an error if the given value is not a number\n *\n * @param {*} v - Value that is expected to be a Number\n */\nexport function assertIsNumber(v) {\n    assert(typeof v === \"number\" && !Number.isNaN(v), \"Expected a number.\");\n}\n\n/**\n * Throw an error if the given value is not a positive integer, or null\n *\n * @param {*} v - Value that is expected to be a positive integer or null\n */\nexport function assertPositiveIntegerOrNull(v) {\n    assert(\n        v === null || (typeof v === \"number\" && parseInt(v) === v && v > 0),\n        \"Expected a positive integer, or null.\"\n    );\n}\n\n\nconst _validationMessages = Symbol();\nconst _validationResult = Symbol();\nconst _Error = Symbol('error');\nconst _Warning = Symbol('warning');\n/**\n * ValidationResult: Used with PRecord to provide detailed, flexible,\n * contextual validation of model data.\n */\nclass ValidationResult {\n    constructor() {\n        this[_validationMessages] = [];\n    }\n\n    get warnings() {\n        return this[_validationMessages].filter(msg => msg.type === _Warning);\n    }\n\n    get errors() {\n        return this[_validationMessages].filter(msg => msg.type === _Error);\n    }\n\n    getFieldIssues(fieldName) {\n        return this[_validationMessages].filter(msg => msg.field === fieldName);\n    }\n\n    /**\n     * Get an array of all validation issues that are not specific to any one field.\n     */\n    get overallIssues() {\n        return this.getFieldIssues(null);\n    }\n\n    get allIssues() {\n        return Object.freeze(this[_validationMessages]);\n    }\n}\nValidationResult.Warning = _Warning;\nValidationResult.Error = _Error;\n\n/**\n * Context during which PRecord validation happens.\n * This contains a reference to the budget that the PRecord in question\n * will become part of.\n */\nclass ValidationContext {\n    constructor(budget) {\n        this[_validationResult] = new ValidationResult();\n        this.budget = budget;\n    }\n\n    _pushMessage(field, message, type) {\n        assert(type === _Warning || type === _Error);\n        assert(field === null || typeof field === 'string');\n        this[_validationResult][_validationMessages].push(Object.freeze({field, type, message}));\n    }\n\n    /**\n     * Add a warning to the validation result.\n     * \n     * @param {string|null} field - The field that this warning is about,\n     * or null for warnings that involve multiple fields.\n     * @param {*} message - A string describing the validation issue.\n     */\n    addWarning(field, message) {\n        this._pushMessage(field, message, _Warning);\n    }\n\n    /**\n     * Add an error to the validation result.\n     * \n     * @param {string|null} field - The field that this error is about,\n     * or null for warnings that involve multiple fields.\n     * @param {*} message - A string describing the validation issue.\n     */\n    addError(field, message) {\n        this._pushMessage(field, message, _Error);\n    }\n\n    get result() { return Object.freeze(this[_validationResult]); }\n}\n\n\n\n/**\n * PRecord: Immutable.Record with a bit of extra functionality\n *\n * Has a _checkInvariants method which can be used to check invariants\n * whenever a new Record is created.\n * \n * Has detailed validation and error/warning reporting functionality.\n *\n * @param {Object} defaultValues - Definition of the fields that this PRecord will have\n * @returns {*} - A class that can be extended to create a new PRecord subclass\n */\nexport const PRecord = defaultValues => class extends Immutable.Record(defaultValues) {\n    constructor(values) {\n        super(values);\n        this._skipChecks = false;\n        this._checkInvariants();\n    }\n    /**\n     * Add some safety checks to the inherited 'set()' method, since it creates\n     * Record objects without using the constructor\n     * @param {string} k - Key to set\n     * @param {*} v - Value to set\n     * @returns {Object} - New instance of this Record subclass with the given changes.\n     */\n    set(k, v) {\n        const result = super.set(k, v);\n        if (!this._skipChecks) {\n            result._checkInvariants();\n        }\n        return result;\n    }\n    /**\n     * Add some safety checks to the inherited 'withMutations()' method, since it creates\n     * Record objects without using the constructor\n     * \n     * Here we only do one check after any and all changes are applied. This lets\n     * many changes be made at once, and _checkInvariants only runs once.\n     * \n     * @param {function} fn - Mutator function\n     * @returns {Object} - New instance of this Record subclass with the given changes.\n     */\n    withMutations(fn) {\n        return super.withMutations(newRecord => {\n            newRecord._skipChecks = true;\n            fn(newRecord);\n            newRecord._skipChecks = false;\n            newRecord._checkInvariants();\n        });\n    }\n    /**\n     * Assertions to help enforce correct usage.\n     * \n     * These invariants should include things like type checks, but\n     * should be somewhat tolerant of incomplete or inconsistent\n     * information - that way, PRecord subclasses can still be used\n     * to hold the data for a form as the user fills it out in the UI,\n     * for example.\n     * \n     * More final and contextual validation should take place in\n     * _validate().\n     **/\n    _checkInvariants() {}\n\n    /**\n     * Validate this record.\n     * @param {ValidationContext} context - the ValidationContext that specifies the\n     * budget that this record will become part of, and provides a place to store the\n     * result.\n     */\n    _validate(context) {}  // eslint-disable-line no-unused-vars\n\n    /**\n     * Validate this PRecord subclass.\n     * Returns an instance of ValidationResult.\n     * \n     * @param {Budget} budget - the Prophecy Budget that this record will be part of.\n     * @returns {ValidationResult}\n     */\n    validateForBudget(budget) {\n        const context = new ValidationContext(budget);\n        this._validate(context);\n        return context.result;\n    }\n\n    /**\n     * Validate this record and throw an exception if any errors are found.\n     * @param {Budget} budget - the Prophecy Budget that this record will be part of.\n     */\n    assertIsValidForBudget(budget) {\n        const validationResult = this.validateForBudget(budget);\n        if (validationResult.errors.length > 0) {\n            let message = `${this.constructor.name} validation failed:\\n`;\n            validationResult.errors.forEach(err => message += ` * ${err.message} (${err.field})\\n`);\n            throw Error(message);\n        }\n    }\n\n    /**\n     * Convert from a JSON-friendly native JavaScript object to this PRecord type.\n     * @param {Object} obj - JavaScript serialized representation of an instance of this Record subclass.\n     * @returns {Object} - New instance of this PRecord subclass.\n     */\n    static fromJS(obj) {\n        return new this(obj);\n    }\n\n    /**\n     * Make toJSON an alias of toJS, so PRecord works with JSON.stringify()\n     *\n     * @returns {Object} - JSON-serialized version of this PRecord subclass.\n     */\n    toJSON() { return this.toJS(); }\n}\n\n// i18n placeholders:\n/**\n * Replace the given English text with a localized version.\n * This is currently just a placeholder.\n *\n * @param {string} str - The text to localize\n * @returns {string} The localized text.\n */\nexport function __(str) { return str; }\n"
  ]
}